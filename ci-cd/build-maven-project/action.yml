name: 'Configure Java and build maven project'
description: |
  Given the required input this action configures the specified version of java and builds a given maven project.
  Before maven is invoked the version and distribution of JDK specified in 'dsb-build-envs' is installed.
  The maven invocation consists of two parts:
    - Part one: set maven project version to input 'dsb-build-envs.application-version'.
    - Part two: invoke maven for build (see goals and arguments below).
  Common inputs:
    'set-extra-envs' accepts a JSON object with extra environment variables to set in same scope as maven is invoked, prior to invocation.
  First part inputs:
    The version used in this invocation is controlled by 'application-version' defined in 'dsb-build-envs'.
    The final argument of the maven invocation in this part, defining the version number, is hardcoded. Ie. all invocations will have
    the following argument prepended: '-DnewVersion=<version>'
    If the 'mvn-version-cmd' input is set this will be used (replaces the whole maven invocation command).
    If the 'mvn-version-cmd' input is empty:
      - And 'maven-build-project-version-command' is defined in 'dsb-build-envs', this will be used (replaces the whole maven
        invocation command).
      - And 'maven-build-project-version-command' is NOT defined in 'dsb-build-envs':
        - And 'maven-build-project-version-goals' is defined in 'dsb-build-envs', goals from 'maven-build-project-version-goals' will
          be used. Otherwise default goal will be used: 'versions:set'.
        - And 'maven-build-project-version-arguments' is defined in 'dsb-build-envs', arguments from
          'maven-build-project-version-arguments' will be used. Otherwise default argument will be used: '-B'.
        - The pom file used will be the one defined by 'application-source-path' in 'dsb-build-envs', can point either to an existing
          pom.xml or to a directory containing it.
        - The resulting maven invocation command is: mvn <arguments> --file <pom file> <goals>
          - Where <pom file> is defined by 'application-source-path' in 'dsb-build-envs', can point either to an existing pom.xml or
            to a directory containing it.
  Second part inputs:
    If the 'mvn-cmd' input is set this will be used (replaces the whole maven invocation command).
    If the 'mvn-cmd' input is empty:
      - And 'maven-build-project-command' is defined in 'dsb-build-envs', this will be used (replaces the whole maven invocation command).
      - And 'maven-build-project-command' is NOT defined in 'dsb-build-envs':
        - And 'maven-build-project-goals' is defined in 'dsb-build-envs', goals from 'maven-build-project-goals' will be used. Otherwise
          default goals will be used: 'clean install org.sonarsource.scanner.maven:sonar-maven-plugin:sonar'.
        - And 'maven-build-project-arguments' is defined in 'dsb-build-envs', arguments from 'maven-build-project-arguments' will be used.
          Otherwise default argument will be used: '-B'.
        - The pom file used will be the one defined by 'application-source-path' in 'dsb-build-envs', can point either to an existing
          pom.xml or to a directory containing it.
        - The resulting maven invocation command is: mvn <arguments> --file <pom file> <goals>
          - Where <pom file> is defined by 'application-source-path' in 'dsb-build-envs', can point either to an existing pom.xml or to a
            directory containing it.
  Deploy of build artifacts:
    - Configure repos in the <pom file> and set one ore both of the following to 'true':
      - If the 'maven-build-project-deploy-release-artifacts' is set to 'true':
        - The following items only applies when building from default branch of repo (normally main), ie. only deploy release from main:
          - And 'maven-build-project-deploy-release-version-command' is defined in 'dsb-build-envs':
            - This command will be used to set version prior to deploying release artifacts, should normally not be used as version is
              already set correctly in the build step.
            - Note that the argument defining the version number is hardcoded. Ie. all invocations will have '-DnewVersion=<version>' appended.
          - And 'maven-build-project-deploy-release-version-command' is NOT defined in 'dsb-build-envs':
            - Will not explicitly set version with maven as version is already set correctly in the build step
          - And 'maven-build-project-deploy-release-deploy-command' is defined in 'dsb-build-envs':
            - This command will be used to deploy artifacts.
          - And 'maven-build-project-deploy-release-deploy-command' is NOT defined in 'dsb-build-envs':
            - Will deploy artifacts with 'mvn -B --file <pom file> deploy -DskipTests'
              - Where <pom file> is defined by 'application-source-path' in 'dsb-build-envs', can point either to an existing pom.xml or
                to a directory containing it.
            - To the maven repo configured under <distributionManagement><repository>
      - If the 'maven-build-project-deploy-snapshot-artifacts' is set to 'true':
        - The following items only applies when building from pull request and for other actions than 'closed', ie. only deploy snapshot
          artifacts from PRs:
          - And 'maven-build-project-deploy-snapshot-version-command' is defined in 'dsb-build-envs':
            - This command will be used to set version prior to deploying snapshot artifacts.
            - Note that the argument defining the version number is hardcoded. Ie. all invocations will have
              '-DnewVersion=pr-<pr number>-SNAPSHOT' appended. Where <pr number> is defined by github.
          - And 'maven-build-project-deploy-snapshot-version-command' is NOT defined in 'dsb-build-envs':
            - Will set version prior to deploying artifacts with 'mvn -B --file <pom file> versions:set -DnewVersion=pr-<pr number>-SNAPSHOT'
              - Where <pom file> is defined by 'application-source-path' in 'dsb-build-envs', can point either to an existing pom.xml or
                to a directory containing it.
              - Where <pr number> is defined by github
          - And 'maven-build-project-deploy-snapshot-deploy-command' is defined in 'dsb-build-envs':
            - This command will be used to deploy artifacts.
          - And 'maven-build-project-deploy-snapshot-deploy-command' is NOT defined in 'dsb-build-envs':
            - Will deploy artifacts with 'mvn -B --file <pom file> deploy -DskipTests'
              - Where <pom file> is defined by 'application-source-path' in 'dsb-build-envs', can point either to an existing pom.xml or
                to a directory containing it.
            - To the maven repo configured under <distributionManagement><snapshotRepository>
author: 'Direktoratet for samfunnssikkerhet og beredskap'
inputs:
  mvn-version-cmd:
    description: 'Override command string used when invoking maven in the first part.'
    required: false
    default: ''
  mvn-cmd:
    description: 'Override command string used when invoking maven in the second part.'
    required: false
    default: ''
  set-extra-envs:
    description: 'JSON object with extra environment variables to set in same scope as maven is invoked.'
    required: false
    default: ''
  dsb-build-envs:
    description: |
      DSB build environment variables JSON.
      Required fields:
        See first step.
      Optional fields:
        maven-build-project-version-command
        maven-build-project-version-goals
        maven-build-project-version-arguments
        maven-build-project-command
        maven-build-project-goals
        maven-build-project-arguments
        maven-build-project-deploy-release-artifacts
        maven-build-project-deploy-release-version-command
        maven-build-project-deploy-release-deploy-command
        maven-build-project-deploy-snapshot-artifacts
        maven-build-project-deploy-snapshot-version-command
        maven-build-project-deploy-snapshot-deploy-command
    required: true

runs:
  using: 'composite'
  steps:
    # verify we have required inputs in order to avoid blank labels/tags
    # TODO revert to @v3
    - uses: dsb-norge/github-actions/ci-cd/require-build-envs@playwright-e2e
      with:
        dsb-build-envs: ${{ inputs.dsb-build-envs }}
        require: |
          acr-password
          acr-username
          application-source-path
          application-version
          caller-repo-calling-branch
          caller-repo-is-on-default-branch
          docker-image-registry
          github-repo-token
          jasypt-password
          java-distribution
          java-version
          maven-build-project-deploy-to-repositories-yml
          maven-extra-envs-from-github
          maven-user-settings-repositories-yml
          sonarqube-token

    # log into azure container registry (ACR) to enable maven to access internal images
    - uses: azure/docker-login@v2
      with:
        login-server: ${{ fromJSON(inputs.dsb-build-envs).docker-image-registry }}
        username: ${{ fromJSON(inputs.dsb-build-envs).acr-username }}
        password: ${{ fromJSON(inputs.dsb-build-envs).acr-password }}

    - name: ðŸ¦• Deno install
      shell: bash
      run: deno install
      working-directory: ${{ github.action_path }}/../

    - id: mvn-cmd
      shell: bash
      env:
        INPUT_DSB_BUILD_ENVS: ${{ inputs.dsb-build-envs }}
        INPUT_MVN_VERSION_CMD: ${{ inputs.mvn-version-cmd }}
        INPUT_MVN_CMD: ${{ inputs.mvn-cmd }}
        GITHUB_WORKSPACE: ${{ github.workspace }}
      run: deno run --allow-env --allow-read --allow-write ${{ github.action_path }}/action/1_mvn-cmd.ts

    # configure maven settings
    # TODO revert to @v3
    - uses: dsb-norge/github-actions/ci-cd/configure-maven-settings@playwright-e2e
      with:
        user-settings-repositories-yml: ${{ fromJSON(inputs.dsb-build-envs).maven-user-settings-repositories-yml }}

    # set up JDK
    - uses: actions/setup-java@v4
      with:
        distribution: ${{ fromJSON(inputs.dsb-build-envs).java-distribution }}
        java-version: ${{ fromJSON(inputs.dsb-build-envs).java-version }}
        overwrite-settings: false # do not overwrite settings.xml from the configure-maven-settings action

    - id: invoke-maven
      shell: bash
      env:
        EXTRA_ENVS: '${{ inputs.set-extra-envs }}'
        EXTRA_ENVS_FROM_GH: '${{ toJSON(fromJSON(inputs.dsb-build-envs).maven-extra-envs-from-github) }}'
        JASYPT_LOCAL_ENCRYPTOR_PASSWORD: ${{ fromJSON(inputs.dsb-build-envs).jasypt-password }}
        GITHUB_TOKEN: ${{ fromJSON(inputs.dsb-build-envs).github-repo-token }} # Needed for Sonar to get PR information, if any
        SONAR_TOKEN: ${{ fromJSON(inputs.dsb-build-envs).sonarqube-token }}
        INPUT_MVN_VERSION_CMD: ${{ steps.mvn-cmd.outputs.mvn-version-cmd }}
        INPUT_MVN_CMD: ${{ steps.mvn-cmd.outputs.mvn-cmd }}
        GITHUB_WORKSPACE: '${{ github.workspace }}'
        GITHUB_SHA: '${{ github.sha }}'
      run: deno run --allow-env --allow-read --allow-write --allow-run=mvn ${{ github.action_path }}/action/2_invoke-maven.ts

    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@567cc7f8dcea3eba5da355f6ebc95663310d8a07
      if: ${{ !cancelled() && github.action == 'maven-build' }}
      with:
        check_name: 'Test Results - ${{ fromJSON(inputs.dsb-build-envs).application-source-path }}'
        files: |
          ${{ fromJSON(inputs.dsb-build-envs).application-source-path }}/**/target/surefire-reports/**/TEST-*.xml
          ${{ fromJSON(inputs.dsb-build-envs).application-source-path }}/**/target/failsafe-reports/**/TEST-*.xml

    - name: Log Test Results
      uses: dorny/test-reporter@31a54ee7ebcacc03a09ea97a7e5465a47b84aea5
      if: ${{ !cancelled() && github.action == 'maven-build'}}
      with:
        name: 'Maven Test Results - ${{ fromJSON(inputs.dsb-build-envs).application-source-path }}'
        path: '${{ fromJSON(inputs.dsb-build-envs).application-source-path }}/**/target/**/TEST-*.xml'
        reporter: java-junit
        fail-on-empty: 'false'

    - id: deploy-artifacts
      shell: bash
      env:
        INPUT_BUILD_ENVS: '${{ inputs.dsb-build-envs }}'
        EXTRA_ENVS: '${{ inputs.set-extra-envs }}'
        EXTRA_ENVS_FROM_GH: '${{ toJSON(fromJSON(inputs.dsb-build-envs).maven-extra-envs-from-github) }}'
        DEPLOY_TO_REPOS_YML: '${{ fromJSON(inputs.dsb-build-envs).maven-build-project-deploy-to-repositories-yml }}'
        GITHUB_WORKSPACE: '${{ github.workspace }}'
        GITHUB_EVENT_ACTION: '${{ github.event.action }}'
        GITHUB_EVENT_NAME: '${{ github.event_name }}'
        GITHUB_EVENT_NUMBER: '${{ github.event.number }}'
      run: deno run --allow-env --allow-read --allow-write --allow-run=mvn ${{ github.action_path }}/action/3_deploy-artifacts.ts
