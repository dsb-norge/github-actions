name: "Configure Java and build maven project"
description: |
  Given the required input this action configures the specified version of java and builds a given maven project.
  Before maven is invoked the version and distribution of JDK specified in 'dsb-build-envs' is installed.
  The maven invocation consists of two parts:
    - Part one: set maven project version to input 'dsb-build-envs.application-version'.
    - Part two: invoke maven for build (see goals and arguments below).
  Common inputs:
    'set-extra-envs' accepts a JSON object with extra environment variables to set in same scope as maven is invoked, prior to invocation.
  First part inputs:
    The version used in this invocation is controlled by 'application-version' defined in 'dsb-build-envs'.
    The final argument of the maven invocation in this part, defining the version number, is hardcoded. Ie. all invocations will have
    the following argument prepended: '-DnewVersion=<version>'
    If the 'mvn-version-cmd' input is set this will be used (replaces the whole maven invocation command).
    If the 'mvn-version-cmd' input is empty:
      - And 'maven-build-project-version-command' is defined in 'dsb-build-envs', this will be used (replaces the whole maven
        invocation command).
      - And 'maven-build-project-version-command' is NOT defined in 'dsb-build-envs':
        - And 'maven-build-project-version-goals' is defined in 'dsb-build-envs', goals from 'maven-build-project-version-goals' will
          be used. Otherwise default goal will be used: 'versions:set'.
        - And 'maven-build-project-version-arguments' is defined in 'dsb-build-envs', arguments from
          'maven-build-project-version-arguments' will be used. Otherwise default argument will be used: '-B'.
        - The pom file used will be the one defined by 'application-source-path' in 'dsb-build-envs', can point either to an existing
          pom.xml or to a directory containing it.
        - The resulting maven invocation command is: mvn <arguments> --file <pom file> <goals>
          - Where <pom file> is defined by 'application-source-path' in 'dsb-build-envs', can point either to an existing pom.xml or
            to a directory containing it.
  Second part inputs:
    If the 'mvn-cmd' input is set this will be used (replaces the whole maven invocation command).
    If the 'mvn-cmd' input is empty:
      - And 'maven-build-project-command' is defined in 'dsb-build-envs', this will be used (replaces the whole maven invocation command).
      - And 'maven-build-project-command' is NOT defined in 'dsb-build-envs':
        - And 'maven-build-project-goals' is defined in 'dsb-build-envs', goals from 'maven-build-project-goals' will be used. Otherwise
          default goals will be used: 'clean verify install org.sonarsource.scanner.maven:sonar-maven-plugin:sonar'.
        - And 'maven-build-project-arguments' is defined in 'dsb-build-envs', arguments from 'maven-build-project-arguments' will be used.
          Otherwise default argument will be used: '-B'.
        - The pom file used will be the one defined by 'application-source-path' in 'dsb-build-envs', can point either to an existing
          pom.xml or to a directory containing it.
        - The resulting maven invocation command is: mvn <arguments> --file <pom file> <goals>
          - Where <pom file> is defined by 'application-source-path' in 'dsb-build-envs', can point either to an existing pom.xml or to a
            directory containing it.
  Deploy of build artifacts:
    - Configure repos in the <pom file> and set one ore both of the following to 'true':
      - If the 'maven-build-project-deploy-release-artifacts' is set to 'true':
        - The following items only applies when building from default branch of repo (normally main), ie. only deploy release from main:
          - And 'maven-build-project-deploy-release-version-command' is defined in 'dsb-build-envs':
            - This command will be used to set version prior to deploying release artifacts, should normally not be used as version is
              already set correctly in the build step.
            - Note that the argument defining the version number is hardcoded. Ie. all invocations will have '-DnewVersion=<version>' appended.
          - And 'maven-build-project-deploy-release-version-command' is NOT defined in 'dsb-build-envs':
            - Will not explicitly set version with maven as version is already set correctly in the build step
          - And 'maven-build-project-deploy-release-deploy-command' is defined in 'dsb-build-envs':
            - This command will be used to deploy artifacts.
          - And 'maven-build-project-deploy-release-deploy-command' is NOT defined in 'dsb-build-envs':
            - Will deploy artifacts with 'mvn -B --file <pom file> deploy -DskipTests'
              - Where <pom file> is defined by 'application-source-path' in 'dsb-build-envs', can point either to an existing pom.xml or
                to a directory containing it.
            - To the maven repo configured under <distributionManagement><repository>
      - If the 'maven-build-project-deploy-snapshot-artifacts' is set to 'true':
        - The following items only applies when building from pull request and for other actions than 'closed', ie. only deploy snapshot
          artifacts from PRs:
          - And 'maven-build-project-deploy-snapshot-version-command' is defined in 'dsb-build-envs':
            - This command will be used to set version prior to deploying snapshot artifacts.
            - Note that the argument defining the version number is hardcoded. Ie. all invocations will have
              '-DnewVersion=pr-<pr number>-SNAPSHOT' appended. Where <pr number> is defined by github.
          - And 'maven-build-project-deploy-snapshot-version-command' is NOT defined in 'dsb-build-envs':
            - Will set version prior to deploying artifacts with 'mvn -B --file <pom file> versions:set -DnewVersion=pr-<pr number>-SNAPSHOT'
              - Where <pom file> is defined by 'application-source-path' in 'dsb-build-envs', can point either to an existing pom.xml or
                to a directory containing it.
              - Where <pr number> is defined by github
          - And 'maven-build-project-deploy-snapshot-deploy-command' is defined in 'dsb-build-envs':
            - This command will be used to deploy artifacts.
          - And 'maven-build-project-deploy-snapshot-deploy-command' is NOT defined in 'dsb-build-envs':
            - Will deploy artifacts with 'mvn -B --file <pom file> deploy -DskipTests'
              - Where <pom file> is defined by 'application-source-path' in 'dsb-build-envs', can point either to an existing pom.xml or
                to a directory containing it.
            - To the maven repo configured under <distributionManagement><snapshotRepository>
author: "Peder Schmedling"
inputs:
  mvn-version-cmd:
    description: "Override command string used when invoking maven in the first part."
    required: false
    default: ""
  mvn-cmd:
    description: "Override command string used when invoking maven in the second part."
    required: false
    default: ""
  set-extra-envs:
    description: "JSON object with extra environment variables to set in same scope as maven is invoked."
    required: false
    default: ""
  dsb-build-envs:
    description: |
      DSB build environment variables JSON.
      Required fields:
        See first step.
      Optional fields:
        maven-build-project-version-command
        maven-build-project-version-goals
        maven-build-project-version-arguments
        maven-build-project-command
        maven-build-project-goals
        maven-build-project-arguments
        maven-build-project-deploy-release-artifacts
        maven-build-project-deploy-release-version-command
        maven-build-project-deploy-release-deploy-command
        maven-build-project-deploy-snapshot-artifacts
        maven-build-project-deploy-snapshot-version-command
        maven-build-project-deploy-snapshot-deploy-command
        maven-build-project-github-packages-enabled
    required: true

runs:
  using: "composite"
  steps:
    # verify we have required inputs in order to avoid blank labels/tags
    - uses: dsb-norge/github-actions/ci-cd/require-build-envs@v2
      with:
        dsb-build-envs: ${{ inputs.dsb-build-envs }}
        require: |
          application-source-path
          application-version
          java-distribution
          java-version
          maven-repo-pom-id
          jasypt-password
          github-repo-token
          sonarqube-token
          maven-repo-token
          maven-repo-username
          caller-repo-calling-branch
          caller-repo-is-on-default-branch
          docker-image-registry
          acr-username
          acr-password

    # log into azure container registry (ACR) to enable maven to access internal images
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ fromJSON(inputs.dsb-build-envs).docker-image-registry }}
        username: ${{ fromJSON(inputs.dsb-build-envs).acr-username }}
        password: ${{ fromJSON(inputs.dsb-build-envs).acr-password }}

    # locate pom.xml and define maven commands
    - id: mvn-cmd
      shell: bash
      run: |
        # Locate pom.xml and define maven commands

        # Defaults
        MVN_VERSION_ARGUMENTS_DEFAULT='-B'
        MVN_VERSION_GOALS_DEFAULT='versions:set'
        MVN_ARGUMENTS_DEFAULT='-B'
        MVN_GOALS_DEFAULT='clean verify install org.sonarsource.scanner.maven:sonar-maven-plugin:sonar'

        BUILD_ENVS=$(cat <<'EOF'
        ${{ inputs.dsb-build-envs }}
        EOF
        )

        # Helper functions
        # Check if field exists in BUILD_ENVS safely
        function has-field { if [[ "$(echo "${BUILD_ENVS}"| jq --arg name "$1" 'has($name)')" == 'true' ]]; then true; else false; fi; }
        # Get field value from BUILD_ENVS safely
        function get-val { echo "${BUILD_ENVS}" | jq -r --arg name "$1" '.[$name]'; }
        function log-info { echo "build-dsb-maven-project: $*"; }
        function log-error { echo "ERROR: build-dsb-maven-project: $*"; }

        # Locate pom.xml
        POM_FILE="${{ fromJSON(inputs.dsb-build-envs).application-source-path }}"
        [ ! -f "${POM_FILE}" ] && POM_FILE="${{ fromJSON(inputs.dsb-build-envs).application-source-path }}/pom.xml"
        [ ! -f "${POM_FILE}" ] && \
          echo log-error "Cannot find pom.xml. Both '${{ fromJSON(inputs.dsb-build-envs).application-source-path }}' and '${POM_FILE}' does not exist!" && \
          exit 1

        # Determine maven command for first invocation
        if [ ! -z '${{ inputs.mvn-version-cmd }}' ]; then
          log-info "using maven version command from 'inputs.mvn-version-cmd'."
          MVN_VERSION_CMD='${{ inputs.mvn-version-cmd }} -DnewVersion=${{ fromJSON(inputs.dsb-build-envs).application-version }}'
        elif has-field 'maven-build-project-version-command'; then
          log-info "using maven version command from 'inputs.dsb-build-envs.maven-build-project-version-command'."
          MVN_VERSION_CMD="$(get-val 'maven-build-project-version-command') -DnewVersion=${{ fromJSON(inputs.dsb-build-envs).application-version }}"
        else
          if has-field 'maven-build-project-version-goals'; then
            log-info "using maven version goals from 'inputs.dsb-build-envs.maven-build-project-version-goals'."
            MVN_VERSION_GOALS="$(get-val 'maven-build-project-version-goals')"
          else
            log-info "using default maven version goals."
            MVN_VERSION_GOALS="${MVN_VERSION_GOALS_DEFAULT}"
          fi
          if has-field 'maven-build-project-version-arguments'; then
            log-info "using maven version arguments from 'inputs.dsb-build-envs.maven-build-project-version-arguments'."
            MVN_VERSION_ARGUMENTS="$(get-val 'maven-build-project-version-arguments')"
          else
            log-info "using default maven version arguments."
            MVN_VERSION_ARGUMENTS="${MVN_VERSION_ARGUMENTS_DEFAULT}"
          fi
          MVN_VERSION_CMD="mvn ${MVN_VERSION_ARGUMENTS} --file ${POM_FILE} ${MVN_VERSION_GOALS} -DnewVersion=${{ fromJSON(inputs.dsb-build-envs).application-version }}"
        fi
        log-info "maven version command: '${MVN_VERSION_CMD}'"
        echo "mvn-version-cmd=${MVN_VERSION_CMD}" >> $GITHUB_OUTPUT

        # Determine maven command for second invocation
        if [ ! -z '${{ inputs.mvn-cmd }}' ]; then
          log-info "using maven command from 'inputs.mvn-cmd'."
          MVN_CMD='${{ inputs.mvn-cmd }}'
        elif has-field 'maven-build-project-command'; then
          log-info "using maven command from 'inputs.dsb-build-envs.maven-build-project-command'."
          MVN_CMD="$(get-val 'maven-build-project-command')"
        else
          if has-field 'maven-build-project-goals'; then
            log-info "using maven goals from 'inputs.dsb-build-envs.maven-build-project-goals'."
            MVN_GOALS="$(get-val 'maven-build-project-goals')"
          else
            log-info "using default maven goals."
            MVN_GOALS="${MVN_GOALS_DEFAULT}"
          fi
          if has-field 'maven-build-project-arguments'; then
            log-info "using maven arguments from 'inputs.dsb-build-envs.maven-build-project-arguments'."
            MVN_ARGUMENTS="$(get-val 'maven-build-project-arguments')"
          else
            log-info "using default maven arguments."
            MVN_ARGUMENTS="${MVN_ARGUMENTS_DEFAULT}"
          fi
          MVN_CMD="mvn ${MVN_ARGUMENTS} --file ${POM_FILE} ${MVN_GOALS}"
        fi
        log-info "Maven build command: '${MVN_CMD}'"
        echo "mvn-cmd=${MVN_CMD}" >> $GITHUB_OUTPUT

    # set up JDK
    - uses: actions/setup-java@v3
      with:
        distribution: ${{ fromJSON(inputs.dsb-build-envs).java-distribution }}
        java-version: ${{ fromJSON(inputs.dsb-build-envs).java-version }}
        server-id: ${{ fromJSON(inputs.dsb-build-envs).maven-repo-pom-id }} # Value of the repository/id field of the pom.xml
        # Jenkins user in repo.dsb.no. Pwd for login to repo.dsb.no found in keepass
        server-username: DSB_MAVEN_REPO_USER_NAME
        server-password: DSB_MAVEN_REPO_TOKEN
        overwrite-settings: true

    # invoke maven
    - shell: bash
      run: |
        # Define extra envs, if any, and invoke maven

        EXTRA_ENVS=$(cat <<'EOF'
        ${{ inputs.set-extra-envs }}
        EOF
        )
        if [ ! -z "$EXTRA_ENVS" ]; then
          echo "::group::build-dsb-maven-project: extra environment variables"
          JSON_FIELDS=$(echo ${EXTRA_ENVS} | jq -r '[keys[]] | join(" ")')
          for JSON_FIELD in ${JSON_FIELDS}; do
              JSON_VALUE=$(echo ${EXTRA_ENVS} | jq -r ".${JSON_FIELD}")
              echo "Setting extra environment variable '${JSON_FIELD}'"
              export "${JSON_FIELD}"="${JSON_VALUE}"
          done
          echo "::endgroup::"
        fi

        echo "::group::build-dsb-maven-project: Setting maven project version"
        echo "build-dsb-maven-project: command string: '${{ steps.mvn-cmd.outputs.mvn-version-cmd }}'"
        ${{ steps.mvn-cmd.outputs.mvn-version-cmd }}
        echo "::endgroup::"

        echo "::group::build-dsb-maven-project: Invoke maven with goals"
        echo "build-dsb-maven-project: command string: '${{ steps.mvn-cmd.outputs.mvn-cmd }}'"
        ${{ steps.mvn-cmd.outputs.mvn-cmd }}
        echo "::endgroup::"
      env:
        JASYPT_LOCAL_ENCRYPTOR_PASSWORD: ${{ fromJSON(inputs.dsb-build-envs).jasypt-password }}
        GITHUB_TOKEN: ${{ fromJSON(inputs.dsb-build-envs).github-repo-token }} # Needed for Sonar to get PR information, if any
        SONAR_TOKEN: ${{ fromJSON(inputs.dsb-build-envs).sonarqube-token }}
        DSB_MAVEN_REPO_TOKEN: ${{ fromJSON(inputs.dsb-build-envs).maven-repo-token }}
        DSB_MAVEN_REPO_USER_NAME: ${{ fromJSON(inputs.dsb-build-envs).maven-repo-username }}

    # deploy maven build artifacts to Nexus
    - shell: bash
      run: |
        # Use maven to deploy artifacts when allowed and requested

        BUILD_ENVS=$(cat <<'EOF'
        ${{ inputs.dsb-build-envs }}
        EOF
        )

        # Helper functions
        # Check if field exists in BUILD_ENVS safely
        function has-field { if [[ "$(echo "${BUILD_ENVS}"| jq --arg name "$1" 'has($name)')" == 'true' ]]; then true; else false; fi; }
        # Get field value from BUILD_ENVS safely
        function get-val { echo "${BUILD_ENVS}" | jq -r --arg name "$1" '.[$name]'; }
        function log-info { echo "build-dsb-maven-project: Deploy artifacts to Nexus: $*"; }
        function log-error { echo "ERROR: build-dsb-maven-project: Deploy artifacts to Nexus: $*"; }

        # Locate pom.xml
        POM_FILE="${{ fromJSON(inputs.dsb-build-envs).application-source-path }}"
        [ ! -f "${POM_FILE}" ] && POM_FILE="${{ fromJSON(inputs.dsb-build-envs).application-source-path }}/pom.xml"
        [ ! -f "${POM_FILE}" ] && \
          log-error "Cannot find pom.xml. Both '${{ fromJSON(inputs.dsb-build-envs).application-source-path }}' and '${POM_FILE}' does not exist!" && \
          exit 1

        # Determine if we are deploying and with what commands
        if [ '${{ github.event_name }}' == 'pull_request' ]; then
          if [ '${{ github.event.action }}' == 'closed' ]; then
            log-info "Maven snapshot artifacts will not be deployed when closing PR."
            exit 0
          elif [ ! "$(get-val 'maven-build-project-deploy-snapshot-artifacts')" == 'true' ]; then
            log-info "Deployment of maven snapshot artifacts not requested."
            exit 0
          else
            log-info "Will deploy maven snapshot artifacts as requested."
            if has-field 'maven-build-project-deploy-snapshot-version-command'; then
              log-info "using maven version command from 'inputs.dsb-build-envs.maven-build-project-deploy-snapshot-version-command'."
              MVN_VERSION_CMD="$(get-val 'maven-build-project-deploy-snapshot-version-command') -DnewVersion=pr-${{ github.event.number }}-SNAPSHOT"
            else
              log-info "using default maven version command."
              MVN_VERSION_CMD="mvn -B --file ${POM_FILE} versions:set -DnewVersion=pr-${{ github.event.number }}-SNAPSHOT"
            fi
            if has-field 'maven-build-project-deploy-snapshot-deploy-command'; then
              log-info "using maven deploy command from 'inputs.dsb-build-envs.maven-build-project-deploy-snapshot-deploy-command'."
              MVN_CMD="$(get-val 'maven-build-project-deploy-snapshot-deploy-command')"
            else
              log-info "using default maven deploy command."
              MVN_CMD="mvn -B --file ${POM_FILE} deploy -DskipTests"
            fi
          fi
        elif [ '${{ github.event_name }}' == 'push' ] || [ '${{ github.event_name }}' == 'workflow_dispatch' ]; then
          if [ ! '${{ fromJSON(inputs.dsb-build-envs).caller-repo-is-on-default-branch }}' == 'true' ]; then
            log-info "Maven release artifacts will not be deployed as current branch '${{ fromJSON(inputs.dsb-build-envs).caller-repo-calling-branch }}' is not the default of this repo."
            exit 0
          elif [ ! "$(get-val 'maven-build-project-deploy-release-artifacts')" == 'true' ]; then
            log-info "Deployment of maven release artifacts not requested."
            exit 0
          else
            log-info "Will deploy maven release artifacts as requested."
            if has-field 'maven-build-project-deploy-release-version-command'; then
              log-info "using maven version command from 'inputs.dsb-build-envs.maven-build-project-deploy-release-version-command'."
              MVN_VERSION_CMD="$(get-val 'maven-build-project-deploy-release-version-command') -DnewVersion=${{ fromJSON(inputs.dsb-build-envs).application-version }}"
            else
              log-info "not setting version with maven as version was already set correctly in the build step."
              MVN_VERSION_CMD=
            fi
            if has-field 'maven-build-project-deploy-release-deploy-command'; then
              log-info "using maven deploy command from 'inputs.dsb-build-envs.maven-build-project-deploy-release-deploy-command'."
              MVN_CMD="$(get-val 'maven-build-project-deploy-release-deploy-command')"
            else
              log-info "using default maven deploy command."
              MVN_CMD="mvn -B --file ${POM_FILE} deploy -DskipTests"
            fi
          fi
        else
          log-error "unsupported github.event_name '${{ github.event_name }}' with github.event.action '${{ github.event.action }}'!"
          exit 1
        fi

        # Load extra envs if any
        EXTRA_ENVS=$(cat <<'EOF'
        ${{ inputs.set-extra-envs }}
        EOF
        )
        if [ ! -z "$EXTRA_ENVS" ]; then
          echo "::group::build-dsb-maven-project: Deploy artifacts: extra environment variables"
          JSON_FIELDS=$(echo ${EXTRA_ENVS} | jq -r '[keys[]] | join(" ")')
          for JSON_FIELD in ${JSON_FIELDS}; do
              JSON_VALUE=$(echo ${EXTRA_ENVS} | jq -r ".${JSON_FIELD}")
              echo "Setting extra environment variable '${JSON_FIELD}'"
              export "${JSON_FIELD}"="${JSON_VALUE}"
          done
          echo "::endgroup::"
        fi

        if [ -z "${MVN_VERSION_CMD}" ]; then
          log-info "Project version already set by maven."
        else
          # Expand any bash variables in maven command string
          MVN_VERSION_CMD=$(eval "echo $MVN_VERSION_CMD")
          echo "::group::build-dsb-maven-project: Setting maven project version for deployment of artifacts"
          log-info "command string: '${MVN_VERSION_CMD}'"
          ${MVN_VERSION_CMD}
          echo "::endgroup::"
        fi

        # Expand any bash variables in maven command string
        MVN_CMD=$(eval "echo $MVN_CMD")
        echo "::group::build-dsb-maven-project: Deploy artifacts: Invoke maven"
        log-info "command string: '${MVN_CMD}'"
        ${MVN_CMD}
        echo "::endgroup::"
      env:
        DSB_MAVEN_REPO_TOKEN: ${{ fromJSON(inputs.dsb-build-envs).maven-repo-token }}
        DSB_MAVEN_REPO_USER_NAME: ${{ fromJSON(inputs.dsb-build-envs).maven-repo-username }}

    # create a new settings.xml with credentials for Github Packages
    - uses: actions/setup-java@v3
      with:
        distribution: ${{ fromJSON(inputs.dsb-build-envs).java-distribution }}
        java-version: ${{ fromJSON(inputs.dsb-build-envs).java-version }}
        server-id: github-dsb-norge # Value of the repository/id field of the pom.xml
        server-username: DSB_GH_PACKAGES_USER_NAME
        server-password: DSB_GH_PACKAGES_REPO_TOKEN
        overwrite-settings: true

    # deploy maven build artifacts to Github Packages
    - shell: bash
      run: |
        # Use maven to deploy artifacts when allowed and requested

        BUILD_ENVS=$(cat <<'EOF'
        ${{ inputs.dsb-build-envs }}
        EOF
        )

        # Helper functions
        # Check if field exists in BUILD_ENVS safely
        function has-field { if [[ "$(echo "${BUILD_ENVS}"| jq --arg name "$1" 'has($name)')" == 'true' ]]; then true; else false; fi; }
        # Get field value from BUILD_ENVS safely
        function get-val { echo "${BUILD_ENVS}" | jq -r --arg name "$1" '.[$name]'; }
        function log-info { echo "build-dsb-maven-project: Deploy artifacts to Github Packages: $*"; }
        function log-error { echo "ERROR: build-dsb-maven-project: Deploy artifacts to Github Packages: $*"; }

        if [ "$(get-val 'maven-build-project-github-packages-enabled')" == 'false' ]; then
            log-info "Maven artifacts will not be deployed to Github Packages as 'maven-build-project-github-packages-enabled' is set to 'false'."
            exit 0
        fi

        # Locate pom.xml
        POM_FILE="${{ fromJSON(inputs.dsb-build-envs).application-source-path }}"
        [ ! -f "${POM_FILE}" ] && POM_FILE="${{ fromJSON(inputs.dsb-build-envs).application-source-path }}/pom.xml"
        [ ! -f "${POM_FILE}" ] && \
          log-error "Cannot find pom.xml. Both '${{ fromJSON(inputs.dsb-build-envs).application-source-path }}' and '${POM_FILE}' does not exist!" && \
          exit 1

        ALT_DEPLOYMENT_REPOSITORY="-DaltDeploymentRepository=github-dsb-norge::default::https://maven.pkg.github.com/${{ github.repository }}"
        log-info "ALT_DEPLOYMENT_REPOSITORY is now set to '${ALT_DEPLOYMENT_REPOSITORY}'"

        # Determine if we are deploying and with what commands
        if [ '${{ github.event_name }}' == 'pull_request' ]; then
          if [ '${{ github.event.action }}' == 'closed' ]; then
            log-info "Maven snapshot artifacts will not be deployed when closing PR."
            exit 0
          elif [ ! "$(get-val 'maven-build-project-deploy-snapshot-artifacts')" == 'true' ]; then
            log-info "Deployment of maven snapshot artifacts not requested."
            exit 0
          else
            log-info "Will deploy maven snapshot artifacts as requested."
            if has-field 'maven-build-project-deploy-snapshot-version-command'; then
              log-info "using maven version command from 'inputs.dsb-build-envs.maven-build-project-deploy-snapshot-version-command'."
              MVN_VERSION_CMD="$(get-val 'maven-build-project-deploy-snapshot-version-command') -DnewVersion=pr-${{ github.event.number }}-SNAPSHOT ${ALT_DEPLOYMENT_REPOSITORY}"
            else
              log-info "using default maven version command."
              MVN_VERSION_CMD="mvn -B --file ${POM_FILE} versions:set -DnewVersion=pr-${{ github.event.number }}-SNAPSHOT ${ALT_DEPLOYMENT_REPOSITORY}"
            fi
            if has-field 'maven-build-project-deploy-snapshot-deploy-command'; then
              log-info "using maven deploy command from 'inputs.dsb-build-envs.maven-build-project-deploy-snapshot-deploy-command'."
              MVN_CMD="$(get-val 'maven-build-project-deploy-snapshot-deploy-command')"
            else
              log-info "using default maven deploy command."
              MVN_CMD="mvn -B --file ${POM_FILE} deploy -DskipTests ${ALT_DEPLOYMENT_REPOSITORY}"
            fi
          fi
        elif [ '${{ github.event_name }}' == 'push' ] || [ '${{ github.event_name }}' == 'workflow_dispatch' ]; then
          if [ ! '${{ fromJSON(inputs.dsb-build-envs).caller-repo-is-on-default-branch }}' == 'true' ]; then
            log-info "Maven release artifacts will not be deployed as current branch '${{ fromJSON(inputs.dsb-build-envs).caller-repo-calling-branch }}' is not the default of this repo."
            exit 0
          elif [ ! "$(get-val 'maven-build-project-deploy-release-artifacts')" == 'true' ]; then
            log-info "Deployment of maven release artifacts not requested."
            exit 0
          else
            log-info "Will deploy maven release artifacts as requested."
            if has-field 'maven-build-project-deploy-release-version-command'; then
              log-info "using maven version command from 'inputs.dsb-build-envs.maven-build-project-deploy-release-version-command'."
              MVN_VERSION_CMD="$(get-val 'maven-build-project-deploy-release-version-command') -DnewVersion=${{ fromJSON(inputs.dsb-build-envs).application-version }} ${ALT_DEPLOYMENT_REPOSITORY}"
            else
              log-info "not setting version with maven as version was already set correctly in the build step."
              MVN_VERSION_CMD=
            fi
            if has-field 'maven-build-project-deploy-release-deploy-command'; then
              log-info "using maven deploy command from 'inputs.dsb-build-envs.maven-build-project-deploy-release-deploy-command'."
              MVN_CMD="$(get-val 'maven-build-project-deploy-release-deploy-command') ${ALT_DEPLOYMENT_REPOSITORY}"
            else
              log-info "using default maven deploy command."
              MVN_CMD="mvn -B --file ${POM_FILE} deploy -DskipTests ${ALT_DEPLOYMENT_REPOSITORY}"
            fi
          fi
        else
          log-error "unsupported github.event_name '${{ github.event_name }}' with github.event.action '${{ github.event.action }}'!"
          exit 1
        fi

        # Load extra envs if any
        EXTRA_ENVS=$(cat <<'EOF'
        ${{ inputs.set-extra-envs }}
        EOF
        )
        if [ ! -z "$EXTRA_ENVS" ]; then
          echo "::group::build-dsb-maven-project: Deploy artifacts: extra environment variables"
          JSON_FIELDS=$(echo ${EXTRA_ENVS} | jq -r '[keys[]] | join(" ")')
          for JSON_FIELD in ${JSON_FIELDS}; do
              JSON_VALUE=$(echo ${EXTRA_ENVS} | jq -r ".${JSON_FIELD}")
              echo "Setting extra environment variable '${JSON_FIELD}'"
              export "${JSON_FIELD}"="${JSON_VALUE}"
          done
          echo "::endgroup::"
        fi

        if [ -z "${MVN_VERSION_CMD}" ]; then
          log-info "Project version already set by maven."
        else
          # Expand any bash variables in maven command string
          MVN_VERSION_CMD=$(eval "echo $MVN_VERSION_CMD")
          echo "::group::build-dsb-maven-project: Setting maven project version for deployment of artifacts"
          log-info "command string: '${MVN_VERSION_CMD}'"
          ${MVN_VERSION_CMD}
          echo "::endgroup::"
        fi

        # Expand any bash variables in maven command string
        MVN_CMD=$(eval "echo $MVN_CMD")
        echo "::group::build-dsb-maven-project: Deploy artifacts: Invoke maven"
        log-info "command string: '${MVN_CMD}'"
        ${MVN_CMD}
        echo "::endgroup::"
      env:
        DSB_GH_PACKAGES_REPO_TOKEN: ${{ fromJSON(inputs.dsb-build-envs).github-repo-token }}
        DSB_GH_PACKAGES_USER_NAME: ${{ github.actor }}
