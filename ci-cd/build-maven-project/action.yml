name: 'Configure Java and build maven project'
description: |
  Given the required input this action configures the specified version of java and builds a given maven project.
  Before maven is invoked the version and distribution of JDK specified in 'dsb-build-envs' is installed.
  The maven invocation consists of two parts:
    - Part one: set maven project version to input 'dsb-build-envs.application-version'.
    - Part two: invoke maven for build (see goals and arguments below).
  Common inputs:
    'set-extra-envs' accepts a JSON object with extra environment variables to set in same scope as maven is invoked, prior to invocation.
  First part inputs:
    The version used in this invocation is controlled by 'application-version' defined in 'dsb-build-envs'.
    The final argument of the maven invocation in this part, defining the version number, is hardcoded. Ie. all invocations will have
    the following argument prepended: '-DnewVersion=<version>'
    If the 'mvn-version-cmd' input is set this will be used (replaces the whole maven invocation command).
    If the 'mvn-version-cmd' input is empty:
      - And 'maven-build-project-version-command' is defined in 'dsb-build-envs', this will be used (replaces the whole maven
        invocation command).
      - And 'maven-build-project-version-command' is NOT defined in 'dsb-build-envs':
        - And 'maven-build-project-version-goals' is defined in 'dsb-build-envs', goals from 'maven-build-project-version-goals' will
          be used. Otherwise default goal will be used: 'versions:set'.
        - And 'maven-build-project-version-arguments' is defined in 'dsb-build-envs', arguments from
          'maven-build-project-version-arguments' will be used. Otherwise default argument will be used: '-B'.
        - The pom file used will be the one defined by 'application-source-path' in 'dsb-build-envs', can point either to an existing
          pom.xml or to a directory containing it.
        - The resulting maven invocation command is: mvn <arguments> --file <pom file> <goals>
  Second part inputs:
    If the 'mvn-cmd' input is set this will be used (replaces the whole maven invocation command).
    If the 'mvn-cmd' input is empty:
      - And 'maven-build-project-command' is defined in 'dsb-build-envs', this will be used (replaces the whole maven invocation command).
      - And 'maven-build-project-command' is NOT defined in 'dsb-build-envs':
        - And 'maven-build-project-goals' is defined in 'dsb-build-envs', goals from 'maven-build-project-goals' will be used. Otherwise
          default goals will be used: 'clean verify install org.sonarsource.scanner.maven:sonar-maven-plugin:sonar'.
        - And 'maven-build-project-arguments' is defined in 'dsb-build-envs', arguments from 'maven-build-project-arguments' will be used.
          Otherwise default argument will be used: '-B'.
        - The pom file used will be the one defined by 'application-source-path' in 'dsb-build-envs', can point either to an existing pom.xml or to a directory containing it.
        - The resulting maven invocation command is: mvn <arguments> --file <pom file> <goals>
  Deploy of build artifacts:
    - Configure repos in the pom.xml and set one ore both of the following to 'true':
      - 'maven-build-project-deploy-release-artifacts'
        - Will deploy artifacts with 'mvn deploy -DskipTests'
        - To the maven repo configured under <distributionManagement><repository>
        - Will only deploy artifacts when building from default branch of repo (normally main).
      - 'maven-build-project-deploy-snapshot-artifacts'
        - Will invoke 'mvn versions:set -DnewVersion=<version>-SNAPSHOT'
        - Will deploy artifacts with 'mvn deploy -DskipTests'
        - To the maven repo configured under <distributionManagement><snapshotRepository>
        - Will only deploy artifacts when building from PR.
author: 'Peder Schmedling'
inputs:
  mvn-version-cmd:
    description: 'Override command string used when invoking maven in the first part.'
    required: false
    default: ''
  mvn-cmd:
    description: 'Override command string used when invoking maven in the second part.'
    required: false
    default: ''
  set-extra-envs:
    description: 'JSON object with extra environment variables to set in same scope as maven is invoked.'
    required: false
    default: ''
  dsb-build-envs:
    description: |
      DSB build environment variables JSON.
      Required fields:
        See first step.
      Optional fields:
        maven-build-project-version-command
        maven-build-project-version-goals
        maven-build-project-version-arguments
        maven-build-project-command
        maven-build-project-goals
        maven-build-project-arguments
        maven-build-project-deploy-release-artifacts
        maven-build-project-deploy-snapshot-artifacts
    required: true

runs:
  using: 'composite'
  steps:
    # verify we have required inputs in order to avoid blank labels/tags
    - uses: dsb-norge/github-actions/ci-cd/require-build-envs@npm-e2e
      with:
        dsb-build-envs: ${{ inputs.dsb-build-envs }}
        require: |
          application-source-path
          application-version
          java-distribution
          java-version
          maven-repo-pom-id
          jasypt-password
          github-repo-token
          sonarqube-token
          maven-repo-token
          maven-repo-username
          caller-repo-calling-branch
          caller-repo-is-on-default-branch
          docker-image-registry
          acr-username
          acr-password

    # log into azure container registry (ACR) to enable maven to access internal images
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ fromJSON(inputs.dsb-build-envs).docker-image-registry }}
        username: ${{ fromJSON(inputs.dsb-build-envs).acr-username }}
        password: ${{ fromJSON(inputs.dsb-build-envs).acr-password }}

    # locate pom.xml and define maven commands
    - id: mvn-cmd
      shell: bash
      run: |
        # Locate pom.xml and define maven commands

        # Defaults
        MVN_VERSION_ARGUMENTS_DEFAULT='-B'
        MVN_VERSION_GOALS_DEFAULT='versions:set'
        MVN_ARGUMENTS_DEFAULT='-B'
        MVN_GOALS_DEFAULT='clean verify install org.sonarsource.scanner.maven:sonar-maven-plugin:sonar'

        BUILD_ENVS=$(cat <<'EOF'
        ${{ inputs.dsb-build-envs }}
        EOF
        )

        # Helper functions
        # Check if field exists in BUILD_ENVS safely
        function has-field { if [[ "$(echo "${BUILD_ENVS}"| jq --arg name "$1" 'has($name)')" == 'true' ]]; then true; else false; fi; }
        # Get field value from BUILD_ENVS safely
        function get-val { echo "${BUILD_ENVS}" | jq -r --arg name "$1" '.[$name]'; }

        # Locate pom.xml
        POM_FILE="${{ fromJSON(inputs.dsb-build-envs).application-source-path }}"
        [ ! -f "${POM_FILE}" ] && POM_FILE="${{ fromJSON(inputs.dsb-build-envs).application-source-path }}/pom.xml"
        [ ! -f "${POM_FILE}" ] && \
          echo "ERROR: build-dsb-maven-project: Cannot find pom.xml. Both '${{ fromJSON(inputs.dsb-build-envs).application-source-path }}' and '${POM_FILE}' does not exist!" && \
          exit 1

        # Determine maven command for first invocation
        if [ ! -z '${{ inputs.mvn-version-cmd }}' ]; then
          echo "build-dsb-maven-project: using maven version command from 'inputs.mvn-version-cmd'."
          MVN_VERSION_CMD='${{ inputs.mvn-version-cmd }} -DnewVersion=${{ fromJSON(inputs.dsb-build-envs).application-version }}'
        elif has-field 'maven-build-project-version-command'; then
          echo "build-dsb-maven-project: using maven version command from 'inputs.dsb-build-envs.maven-build-project-version-command'."
          MVN_VERSION_CMD="$(get-val 'maven-build-project-version-command') -DnewVersion=${{ fromJSON(inputs.dsb-build-envs).application-version }}"
        else
          if has-field 'maven-build-project-version-goals'; then
            echo "build-dsb-maven-project: using maven version goals from 'inputs.dsb-build-envs.maven-build-project-version-goals'."
            MVN_VERSION_GOALS="$(get-val 'maven-build-project-version-goals')"
          else
            echo "build-dsb-maven-project: using default maven version goals."
            MVN_VERSION_GOALS="${MVN_VERSION_GOALS_DEFAULT}"
          fi
          if has-field 'maven-build-project-version-arguments'; then
            echo "build-dsb-maven-project: using maven version arguments from 'inputs.dsb-build-envs.maven-build-project-version-arguments'."
            MVN_VERSION_ARGUMENTS="$(get-val 'maven-build-project-version-arguments')"
          else
            echo "build-dsb-maven-project: using default maven version arguments."
            MVN_VERSION_ARGUMENTS="${MVN_VERSION_ARGUMENTS_DEFAULT}"
          fi
          MVN_VERSION_CMD="mvn ${MVN_VERSION_ARGUMENTS} --file ${POM_FILE} ${MVN_VERSION_GOALS} -DnewVersion=${{ fromJSON(inputs.dsb-build-envs).application-version }}"
        fi
        echo "build-dsb-maven-project: maven version command: '${MVN_VERSION_CMD}'"
        echo "::set-output name=mvn-version-cmd::${MVN_VERSION_CMD}"

        # Determine maven command for second invocation
        if [ ! -z '${{ inputs.mvn-cmd }}' ]; then
          echo "build-dsb-maven-project: using maven command from 'inputs.mvn-cmd'."
          MVN_CMD='${{ inputs.mvn-cmd }}'
        elif has-field 'maven-build-project-command'; then
          echo "build-dsb-maven-project: using maven command from 'inputs.dsb-build-envs.maven-build-project-command'."
          MVN_CMD="$(get-val 'maven-build-project-command')"
        else
          if has-field 'maven-build-project-goals'; then
            echo "build-dsb-maven-project: using maven goals from 'inputs.dsb-build-envs.maven-build-project-goals'."
            MVN_GOALS="$(get-val 'maven-build-project-goals')"
          else
            echo "build-dsb-maven-project: using default maven goals."
            MVN_GOALS="${MVN_GOALS_DEFAULT}"
          fi
          if has-field 'maven-build-project-arguments'; then
            echo "build-dsb-maven-project: using maven arguments from 'inputs.dsb-build-envs.maven-build-project-arguments'."
            MVN_ARGUMENTS="$(get-val 'maven-build-project-arguments')"
          else
            echo "build-dsb-maven-project: using default maven arguments."
            MVN_ARGUMENTS="${MVN_ARGUMENTS_DEFAULT}"
          fi
          MVN_CMD="mvn ${MVN_ARGUMENTS} --file ${POM_FILE} ${MVN_GOALS}"
        fi
        echo "build-dsb-maven-project: Maven build command: '${MVN_CMD}'"
        echo "::set-output name=mvn-cmd::${MVN_CMD}"

    # set up JDK
    - uses: actions/setup-java@v2
      with:
        distribution: ${{ fromJSON(inputs.dsb-build-envs).java-distribution }}
        java-version: ${{ fromJSON(inputs.dsb-build-envs).java-version }}
        server-id: ${{ fromJSON(inputs.dsb-build-envs).maven-repo-pom-id }} # Value of the repository/id field of the pom.xml
        # Jenkins user in repo.dsb.no. Pwd for login to repo.dsb.no found in keepass
        server-username: DSB_MAVEN_REPO_USER_NAME
        server-password: DSB_MAVEN_REPO_TOKEN
        overwrite-settings: true

    # invoke maven
    - shell: bash
      run: |
        # Define extra envs, if any, and invoke maven

        EXTRA_ENVS=$(cat <<'EOF'
        ${{ inputs.set-extra-envs }}
        EOF
        )
        if [ ! -z "$EXTRA_ENVS" ]; then
          echo "::group::build-dsb-maven-project: extra environment variables"
          JSON_FIELDS=$(echo ${EXTRA_ENVS} | jq -r '[keys[]] | join(" ")')
          for JSON_FIELD in ${JSON_FIELDS}; do
              JSON_VALUE=$(echo ${EXTRA_ENVS} | jq -r ".${JSON_FIELD}")
              echo "Setting extra environment variable '${JSON_FIELD}'"
              export "${JSON_FIELD}"="${JSON_VALUE}"
          done
          echo "::endgroup::"
        fi

        echo "::group::build-dsb-maven-project: Setting maven project version"
        echo "build-dsb-maven-project: command string: '${{ steps.mvn-cmd.outputs.mvn-version-cmd }}'"
        ${{ steps.mvn-cmd.outputs.mvn-version-cmd }}
        echo "::endgroup::"

        echo "::group::build-dsb-maven-project: Invoke maven with goals"
        echo "build-dsb-maven-project: command string: '${{ steps.mvn-cmd.outputs.mvn-cmd }}'"
        ${{ steps.mvn-cmd.outputs.mvn-cmd }}
        echo "::endgroup::"
      env:
        JASYPT_LOCAL_ENCRYPTOR_PASSWORD: ${{ fromJSON(inputs.dsb-build-envs).jasypt-password }}
        GITHUB_TOKEN: ${{ fromJSON(inputs.dsb-build-envs).github-repo-token }} # Needed for Sonar to get PR information, if any
        SONAR_TOKEN: ${{ fromJSON(inputs.dsb-build-envs).sonarqube-token }}
        DSB_MAVEN_REPO_TOKEN: ${{ fromJSON(inputs.dsb-build-envs).maven-repo-token }}
        DSB_MAVEN_REPO_USER_NAME: ${{ fromJSON(inputs.dsb-build-envs).maven-repo-username }}

    # deploy maven build artifacts
    - shell: bash
      run: |
        # Use maven to deploy artifacts when allowed and requested

        BUILD_ENVS=$(cat <<'EOF'
        ${{ inputs.dsb-build-envs }}
        EOF
        )

        # Helper functions
        # Get field value from BUILD_ENVS safely
        function get-val { echo "${BUILD_ENVS}" | jq -r --arg name "$1" '.[$name]'; }

        # Locate pom.xml
        POM_FILE="${{ fromJSON(inputs.dsb-build-envs).application-source-path }}"
        [ ! -f "${POM_FILE}" ] && POM_FILE="${{ fromJSON(inputs.dsb-build-envs).application-source-path }}/pom.xml"
        [ ! -f "${POM_FILE}" ] && \
          echo "ERROR: build-dsb-maven-project: Deploy artifacts: Cannot find pom.xml. Both '${{ fromJSON(inputs.dsb-build-envs).application-source-path }}' and '${POM_FILE}' does not exist!" && \
          exit 1

        # Determine if we are deploying and with what commands
        if [ '${{ github.event_name }}' == 'pull_request' ]; then
          if [ '${{ github.event.action }}' == 'closed' ]; then
            echo "build-dsb-maven-project: Deploy artifacts: Maven snapshot artifacts will not be deployed when closing PR."
            exit 0
          elif [ ! "$(get-val 'maven-build-project-deploy-snapshot-artifacts')" == 'true' ]; then
            echo "build-dsb-maven-project: Deploy artifacts: Deployment of maven snapshot artifacts not requested."
            exit 0
          else
            echo "build-dsb-maven-project: Deploy artifacts: Will deploy maven snapshot artifacts as requested."
            MVN_VERSION_CMD="mvn -B --file ${POM_FILE} versions:set -DnewVersion=pr-${{ github.event.number }}-SNAPSHOT"
            MVN_CMD="mvn -B --file ${POM_FILE} deploy -DskipTests"
          fi
        elif [ '${{ github.event_name }}' == 'push' ] || [ '${{ github.event_name }}' == 'workflow_dispatch' ]; then
          if [ ! '${{ fromJSON(inputs.dsb-build-envs).caller-repo-is-on-default-branch }}' == 'true' ]; then
            echo "build-dsb-maven-project: Deploy artifacts: Maven release artifacts will not be deployed as current branch '${{ fromJSON(inputs.dsb-build-envs).caller-repo-calling-branch }}' is not the default of this repo."
            exit 0
          elif [ ! "$(get-val 'maven-build-project-deploy-release-artifacts')" == 'true' ]; then
            echo "build-dsb-maven-project: Deploy artifacts: Deployment of maven release artifacts not requested."
            exit 0
          else
            echo "build-dsb-maven-project: Deploy artifacts: Will deploy maven release artifacts as requested."
            # Version is already set corretly in build step
            MVN_VERSION_CMD=
            MVN_CMD="mvn -B --file ${POM_FILE} deploy -DskipTests"
          fi
        else
          echo "ERROR: build-dsb-maven-project: Deploy artifacts: unsupported github.event_name '${{ github.event_name }}' with github.event.action '${{ github.event.action }}'!"
          exit 1
        fi

        # Load extra envs if any
        EXTRA_ENVS=$(cat <<'EOF'
        ${{ inputs.set-extra-envs }}
        EOF
        )
        if [ ! -z "$EXTRA_ENVS" ]; then
          echo "::group::build-dsb-maven-project: Deploy artifacts: extra environment variables"
          JSON_FIELDS=$(echo ${EXTRA_ENVS} | jq -r '[keys[]] | join(" ")')
          for JSON_FIELD in ${JSON_FIELDS}; do
              JSON_VALUE=$(echo ${EXTRA_ENVS} | jq -r ".${JSON_FIELD}")
              echo "Setting extra environment variable '${JSON_FIELD}'"
              export "${JSON_FIELD}"="${JSON_VALUE}"
          done
          echo "::endgroup::"
        fi

        if [ -z "${MVN_VERSION_CMD}" ]; then
          echo "build-dsb-maven-project: Deploy artifacts: Project version already set by maven."
        else
          echo "::group::build-dsb-maven-project: Setting maven project version for deployment of artifacts"
          echo "build-dsb-maven-project: Deploy artifacts: command string: '${MVN_VERSION_CMD}'"
          ${MVN_VERSION_CMD}
          echo "::endgroup::"
        fi

        echo "::group::build-dsb-maven-project: Deploy artifacts: Invoke maven"
        echo "build-dsb-maven-project: Deploy artifacts: command string: '${MVN_CMD}'"
        ${MVN_CMD}
        echo "::endgroup::"
      env:
        DSB_MAVEN_REPO_TOKEN: ${{ fromJSON(inputs.dsb-build-envs).maven-repo-token }}
        DSB_MAVEN_REPO_USER_NAME: ${{ fromJSON(inputs.dsb-build-envs).maven-repo-username }}
