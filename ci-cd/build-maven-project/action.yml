name: "Configure Java and build maven project"
description: |
  Given the required input this action configures the specified version of java and builds a given maven project.
  Before maven is invoked the version and distribution of JDK specified in 'dsb-build-envs' is installed.
  The maven invocation consists of two parts:
    - Part one: set maven project version to input 'dsb-build-envs.application-version'.
    - Part two: invoke maven for build (see goals and arguments below).
  Common inputs:
    'set-extra-envs' accepts a JSON object with extra environment variables to set in same scope as maven is invoked, prior to invocation.
  First part inputs:
    The version used in this invocation is controlled by 'application-version' defined in 'dsb-build-envs'.
    The final argument of the maven invocation in this part, defining the version number, is hardcoded. Ie. all invocations will have
    the following argument prepended: '-DnewVersion=<version>'
    If the 'mvn-version-cmd' input is set this will be used (replaces the whole maven invocation command).
    If the 'mvn-version-cmd' input is empty:
      - And 'maven-build-project-version-command' is defined in 'dsb-build-envs', this will be used (replaces the whole maven
        invocation command).
      - And 'maven-build-project-version-command' is NOT defined in 'dsb-build-envs':
        - And 'maven-build-project-version-goals' is defined in 'dsb-build-envs', goals from 'maven-build-project-version-goals' will
          be used. Otherwise default goal will be used: 'versions:set'.
        - And 'maven-build-project-version-arguments' is defined in 'dsb-build-envs', arguments from
          'maven-build-project-version-arguments' will be used. Otherwise default argument will be used: '-B'.
        - The pom file used will be the one defined by 'application-source-path' in 'dsb-build-envs', can point either to an existing
          pom.xml or to a directory containing it.
        - The resulting maven invocation command is: mvn <arguments> --file <pom file> <goals>
          - Where <pom file> is defined by 'application-source-path' in 'dsb-build-envs', can point either to an existing pom.xml or
            to a directory containing it.
  Second part inputs:
    If the 'mvn-cmd' input is set this will be used (replaces the whole maven invocation command).
    If the 'mvn-cmd' input is empty:
      - And 'maven-build-project-command' is defined in 'dsb-build-envs', this will be used (replaces the whole maven invocation command).
      - And 'maven-build-project-command' is NOT defined in 'dsb-build-envs':
        - And 'maven-build-project-goals' is defined in 'dsb-build-envs', goals from 'maven-build-project-goals' will be used. Otherwise
          default goals will be used: 'clean install org.sonarsource.scanner.maven:sonar-maven-plugin:sonar'.
        - And 'maven-build-project-arguments' is defined in 'dsb-build-envs', arguments from 'maven-build-project-arguments' will be used.
          Otherwise default argument will be used: '-B'.
        - The pom file used will be the one defined by 'application-source-path' in 'dsb-build-envs', can point either to an existing
          pom.xml or to a directory containing it.
        - The resulting maven invocation command is: mvn <arguments> --file <pom file> <goals>
          - Where <pom file> is defined by 'application-source-path' in 'dsb-build-envs', can point either to an existing pom.xml or to a
            directory containing it.
  Deploy of build artifacts:
    - Configure repos in the <pom file> and set one ore both of the following to 'true':
      - If the 'maven-build-project-deploy-release-artifacts' is set to 'true':
        - The following items only applies when building from default branch of repo (normally main), ie. only deploy release from main:
          - And 'maven-build-project-deploy-release-version-command' is defined in 'dsb-build-envs':
            - This command will be used to set version prior to deploying release artifacts, should normally not be used as version is
              already set correctly in the build step.
            - Note that the argument defining the version number is hardcoded. Ie. all invocations will have '-DnewVersion=<version>' appended.
          - And 'maven-build-project-deploy-release-version-command' is NOT defined in 'dsb-build-envs':
            - Will not explicitly set version with maven as version is already set correctly in the build step
          - And 'maven-build-project-deploy-release-deploy-command' is defined in 'dsb-build-envs':
            - This command will be used to deploy artifacts.
          - And 'maven-build-project-deploy-release-deploy-command' is NOT defined in 'dsb-build-envs':
            - Will deploy artifacts with 'mvn -B --file <pom file> deploy -DskipTests'
              - Where <pom file> is defined by 'application-source-path' in 'dsb-build-envs', can point either to an existing pom.xml or
                to a directory containing it.
            - To the maven repo configured under <distributionManagement><repository>
      - If the 'maven-build-project-deploy-snapshot-artifacts' is set to 'true':
        - The following items only applies when building from pull request and for other actions than 'closed', ie. only deploy snapshot
          artifacts from PRs:
          - And 'maven-build-project-deploy-snapshot-version-command' is defined in 'dsb-build-envs':
            - This command will be used to set version prior to deploying snapshot artifacts.
            - Note that the argument defining the version number is hardcoded. Ie. all invocations will have
              '-DnewVersion=pr-<pr number>-SNAPSHOT' appended. Where <pr number> is defined by github.
          - And 'maven-build-project-deploy-snapshot-version-command' is NOT defined in 'dsb-build-envs':
            - Will set version prior to deploying artifacts with 'mvn -B --file <pom file> versions:set -DnewVersion=pr-<pr number>-SNAPSHOT'
              - Where <pom file> is defined by 'application-source-path' in 'dsb-build-envs', can point either to an existing pom.xml or
                to a directory containing it.
              - Where <pr number> is defined by github
          - And 'maven-build-project-deploy-snapshot-deploy-command' is defined in 'dsb-build-envs':
            - This command will be used to deploy artifacts.
          - And 'maven-build-project-deploy-snapshot-deploy-command' is NOT defined in 'dsb-build-envs':
            - Will deploy artifacts with 'mvn -B --file <pom file> deploy -DskipTests'
              - Where <pom file> is defined by 'application-source-path' in 'dsb-build-envs', can point either to an existing pom.xml or
                to a directory containing it.
            - To the maven repo configured under <distributionManagement><snapshotRepository>
author: "Peder Schmedling"
inputs:
  mvn-version-cmd:
    description: "Override command string used when invoking maven in the first part."
    required: false
    default: ""
  mvn-cmd:
    description: "Override command string used when invoking maven in the second part."
    required: false
    default: ""
  set-extra-envs:
    description: "JSON object with extra environment variables to set in same scope as maven is invoked."
    required: false
    default: ""
  dsb-build-envs:
    description: |
      DSB build environment variables JSON.
      Required fields:
        See first step.
      Optional fields:
        maven-build-project-version-command
        maven-build-project-version-goals
        maven-build-project-version-arguments
        maven-build-project-command
        maven-build-project-goals
        maven-build-project-arguments
        maven-build-project-deploy-release-artifacts
        maven-build-project-deploy-release-version-command
        maven-build-project-deploy-release-deploy-command
        maven-build-project-deploy-snapshot-artifacts
        maven-build-project-deploy-snapshot-version-command
        maven-build-project-deploy-snapshot-deploy-command
    required: true

runs:
  using: "composite"
  steps:
    # verify we have required inputs in order to avoid blank labels/tags
    - uses: dsb-norge/github-actions/ci-cd/require-build-envs@v2
      with:
        dsb-build-envs: ${{ inputs.dsb-build-envs }}
        require: |
          acr-password
          acr-username
          application-source-path
          application-version
          caller-repo-calling-branch
          caller-repo-is-on-default-branch
          docker-image-registry
          github-repo-token
          jasypt-password
          java-distribution
          java-version
          maven-build-project-deploy-to-repositories-yml
          maven-extra-envs-from-github
          maven-user-settings-repositories-yml
          sonarqube-token

    # log into azure container registry (ACR) to enable maven to access internal images
    - uses: azure/docker-login@v2
      with:
        login-server: ${{ fromJSON(inputs.dsb-build-envs).docker-image-registry }}
        username: ${{ fromJSON(inputs.dsb-build-envs).acr-username }}
        password: ${{ fromJSON(inputs.dsb-build-envs).acr-password }}

    # locate pom.xml and define maven commands
    - id: mvn-cmd
      shell: bash
      env:
        BUILD_ENVS: "${{ inputs.dsb-build-envs }}"
      run: |
        # Locate pom.xml and define maven commands

        set -o allexport; source "${{ github.action_path }}/helpers.sh"; set +o allexport;

        # Defaults
        MVN_VERSION_ARGUMENTS_DEFAULT='-B'
        MVN_VERSION_GOALS_DEFAULT='versions:set'
        MVN_ARGUMENTS_DEFAULT='-B'
        MVN_GOALS_DEFAULT='clean install org.sonarsource.scanner.maven:sonar-maven-plugin:sonar'

        # Locate pom.xml
        POM_FILE="${{ fromJSON(inputs.dsb-build-envs).application-source-path }}"
        [ ! -f "${POM_FILE}" ] && POM_FILE="${{ fromJSON(inputs.dsb-build-envs).application-source-path }}/pom.xml"
        [ ! -f "${POM_FILE}" ] && \
          echo log-error "Cannot find pom.xml. Both '${{ fromJSON(inputs.dsb-build-envs).application-source-path }}' and '${POM_FILE}' does not exist!" && \
          exit 1

        # Determine maven command for first invocation
        if [ ! -z '${{ inputs.mvn-version-cmd }}' ]; then
          log-info "using maven version command from 'inputs.mvn-version-cmd'."
          MVN_VERSION_CMD='${{ inputs.mvn-version-cmd }} -DnewVersion=${{ fromJSON(inputs.dsb-build-envs).application-version }}'
        elif has-field 'maven-build-project-version-command'; then
          log-info "using maven version command from 'inputs.dsb-build-envs.maven-build-project-version-command'."
          MVN_VERSION_CMD="$(get-val 'maven-build-project-version-command') -DnewVersion=${{ fromJSON(inputs.dsb-build-envs).application-version }}"
        else
          if has-field 'maven-build-project-version-goals'; then
            log-info "using maven version goals from 'inputs.dsb-build-envs.maven-build-project-version-goals'."
            MVN_VERSION_GOALS="$(get-val 'maven-build-project-version-goals')"
          else
            log-info "using default maven version goals."
            MVN_VERSION_GOALS="${MVN_VERSION_GOALS_DEFAULT}"
          fi
          if has-field 'maven-build-project-version-arguments'; then
            log-info "using maven version arguments from 'inputs.dsb-build-envs.maven-build-project-version-arguments'."
            MVN_VERSION_ARGUMENTS="$(get-val 'maven-build-project-version-arguments')"
          else
            log-info "using default maven version arguments."
            MVN_VERSION_ARGUMENTS="${MVN_VERSION_ARGUMENTS_DEFAULT}"
          fi
          MVN_VERSION_CMD="mvn ${MVN_VERSION_ARGUMENTS} --file ${POM_FILE} ${MVN_VERSION_GOALS} -DnewVersion=${{ fromJSON(inputs.dsb-build-envs).application-version }}"
        fi
        log-info "maven version command: '${MVN_VERSION_CMD}'"
        set-output 'mvn-version-cmd' "${MVN_VERSION_CMD}"

        # Determine maven command for second invocation
        if [ ! -z '${{ inputs.mvn-cmd }}' ]; then
          log-info "using maven command from 'inputs.mvn-cmd'."
          MVN_CMD='${{ inputs.mvn-cmd }}'
        elif has-field 'maven-build-project-command'; then
          log-info "using maven command from 'inputs.dsb-build-envs.maven-build-project-command'."
          MVN_CMD="$(get-val 'maven-build-project-command')"
        else
          if has-field 'maven-build-project-goals'; then
            log-info "using maven goals from 'inputs.dsb-build-envs.maven-build-project-goals'."
            MVN_GOALS="$(get-val 'maven-build-project-goals')"
          else
            log-info "using default maven goals."
            MVN_GOALS="${MVN_GOALS_DEFAULT}"
          fi
          if has-field 'maven-build-project-arguments'; then
            log-info "using maven arguments from 'inputs.dsb-build-envs.maven-build-project-arguments'."
            MVN_ARGUMENTS="$(get-val 'maven-build-project-arguments')"
          else
            log-info "using default maven arguments."
            MVN_ARGUMENTS="${MVN_ARGUMENTS_DEFAULT}"
          fi
          MVN_CMD="mvn ${MVN_ARGUMENTS} --file ${POM_FILE} ${MVN_GOALS}"
        fi
        log-info "Maven build command: '${MVN_CMD}'"
        set-output 'mvn-cmd' "${MVN_CMD}"

    # configure maven settings
    - uses: dsb-norge/github-actions/ci-cd/configure-maven-settings@v2
      with:
        user-settings-repositories-yml: ${{ fromJSON(inputs.dsb-build-envs).maven-user-settings-repositories-yml }}

    # set up JDK
    - uses: actions/setup-java@v4
      with:
        distribution: ${{ fromJSON(inputs.dsb-build-envs).java-distribution }}
        java-version: ${{ fromJSON(inputs.dsb-build-envs).java-version }}
        overwrite-settings: false # do not overwrite settings.xml from the configure-maven-settings action

    - id: invoke-maven
      shell: bash
      env:
        EXTRA_ENVS: "${{ inputs.set-extra-envs }}"
        EXTRA_ENVS_FROM_GH: "${{ fromJSON(inputs.dsb-build-envs).maven-extra-envs-from-github }}"
        JASYPT_LOCAL_ENCRYPTOR_PASSWORD: ${{ fromJSON(inputs.dsb-build-envs).jasypt-password }}
        GITHUB_TOKEN: ${{ fromJSON(inputs.dsb-build-envs).github-repo-token }} # Needed for Sonar to get PR information, if any
        SONAR_TOKEN: ${{ fromJSON(inputs.dsb-build-envs).sonarqube-token }}
      run: |
        # Define extra envs, if any, and invoke maven

        set -o allexport; source "${{ github.action_path }}/helpers.sh"; set +o allexport;

        # export extra envs
        export-extra-envs "general" "${EXTRA_ENVS}"
        export-extra-envs "from github" "${EXTRA_ENVS_FROM_GH}"

        start-group "Setting maven project version"
        log-info "command string: '${{ steps.mvn-cmd.outputs.mvn-version-cmd }}'"
        ${{ steps.mvn-cmd.outputs.mvn-version-cmd }}
        end-group

        start-group "Invoke maven with goals"
        log-info "command string: '${{ steps.mvn-cmd.outputs.mvn-cmd }}'"
        ${{ steps.mvn-cmd.outputs.mvn-cmd }}
        end-group

        # remove extra envs
        unset-extra-envs "general" "${EXTRA_ENVS}"
        unset-extra-envs "from github" "${EXTRA_ENVS_FROM_GH}"

    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@567cc7f8dcea3eba5da355f6ebc95663310d8a07
      if: ${{ !cancelled() && github.action == 'maven-build' }}
      with:
        check_name: 'Test Results - ${{ fromJSON(inputs.dsb-build-envs).application-source-path }}'
        files: |
          ${{ fromJSON(inputs.dsb-build-envs).application-source-path }}/**/target/surefire-reports/**/*.xml
          ${{ fromJSON(inputs.dsb-build-envs).application-source-path }}/**/target/failsafe-reports/**/*.xml
          !${{ fromJSON(inputs.dsb-build-envs).application-source-path }}/**/target/failsafe-reports/**/failsafe-summary.xml

    - name: Log Test Results
      uses: dorny/test-reporter@31a54ee7ebcacc03a09ea97a7e5465a47b84aea5
      if: ${{ !cancelled() && github.action == 'maven-build'}}
      with:
        name: 'Maven Test Results - ${{ fromJSON(inputs.dsb-build-envs).application-source-path }}'
        path: '${{ fromJSON(inputs.dsb-build-envs).application-source-path }}/**/target/surefire-reports/**/*.xml, ${{ fromJSON(inputs.dsb-build-envs).application-source-path }}/**/target/failsafe-reports/**/TEST*.xml'
        reporter: java-junit
        fail-on-empty: 'false'

    - id: deploy-artifacts
      shell: bash
      env:
        BUILD_ENVS: "${{ inputs.dsb-build-envs }}"
        EXTRA_ENVS: "${{ inputs.set-extra-envs }}"
        EXTRA_ENVS_FROM_GH: "${{ fromJSON(inputs.dsb-build-envs).maven-extra-envs-from-github }}"
        DEPLOY_TO_REPOS_YML: "${{ fromJSON(inputs.dsb-build-envs).maven-build-project-deploy-to-repositories-yml }}"
      run: |
        # Use maven to deploy build artifacts to configured maven deployment repos when allowed and requested

        set -o allexport; source "${{ github.action_path }}/helpers.sh"; set +o allexport;

        # Locate pom.xml
        POM_FILE="${{ fromJSON(inputs.dsb-build-envs).application-source-path }}"
        [ ! -f "${POM_FILE}" ] && POM_FILE="${{ fromJSON(inputs.dsb-build-envs).application-source-path }}/pom.xml"
        [ ! -f "${POM_FILE}" ] && \
          log-error "Cannot find pom.xml. Both '${{ fromJSON(inputs.dsb-build-envs).application-source-path }}' and '${POM_FILE}' does not exist!" && \
          exit 1

        # Determine if we are deploying and with what commands
        if [ '${{ github.event_name }}' == 'pull_request' ]; then

          # it's snapshot, record this for later
          DEPLOY_TYPE='snapshot'

          if [ '${{ github.event.action }}' == 'closed' ]; then
            log-info "Maven snapshot artifacts will not be deployed when closing PR."
            exit 0
          elif [ ! "$(get-val 'maven-build-project-deploy-snapshot-artifacts')" == 'true' ]; then
            log-info "Deployment of maven snapshot artifacts not requested."
            exit 0
          else
            log-info "Will deploy maven snapshot artifacts as requested."
            if has-field 'maven-build-project-deploy-snapshot-version-command'; then
              log-info "using maven version command from 'inputs.dsb-build-envs.maven-build-project-deploy-snapshot-version-command'."
              MVN_VERSION_CMD="$(get-val 'maven-build-project-deploy-snapshot-version-command') -DnewVersion=pr-${{ github.event.number }}-SNAPSHOT"
            else
              log-info "using default maven version command."
              MVN_VERSION_CMD="mvn -B --file ${POM_FILE} versions:set -DnewVersion=pr-${{ github.event.number }}-SNAPSHOT"
            fi
            if has-field 'maven-build-project-deploy-snapshot-deploy-command'; then
              log-info "using maven deploy command from 'inputs.dsb-build-envs.maven-build-project-deploy-snapshot-deploy-command'."
              MVN_CMD="$(get-val 'maven-build-project-deploy-snapshot-deploy-command')"
            else
              log-info "using default maven deploy command."
              MVN_CMD="mvn -B --file ${POM_FILE} deploy -DskipTests"
            fi
          fi
        elif [ '${{ github.event_name }}' == 'push' ] || [ '${{ github.event_name }}' == 'workflow_dispatch' ]; then

          # it's release, record this for later
          DEPLOY_TYPE='release'

          if [ ! '${{ fromJSON(inputs.dsb-build-envs).caller-repo-is-on-default-branch }}' == 'true' ]; then
            log-info "Maven release artifacts will not be deployed as current branch '${{ fromJSON(inputs.dsb-build-envs).caller-repo-calling-branch }}' is not the default of this repo."
            exit 0
          elif [ ! "$(get-val 'maven-build-project-deploy-release-artifacts')" == 'true' ]; then
            log-info "Deployment of maven release artifacts not requested."
            exit 0
          else
            log-info "Will deploy maven release artifacts as requested."
            if has-field 'maven-build-project-deploy-release-version-command'; then
              log-info "using maven version command from 'inputs.dsb-build-envs.maven-build-project-deploy-release-version-command'."
              MVN_VERSION_CMD="$(get-val 'maven-build-project-deploy-release-version-command') -DnewVersion=${{ fromJSON(inputs.dsb-build-envs).application-version }}"
            else
              log-info "not setting version with maven as version was already set correctly in the build step."
              MVN_VERSION_CMD=
            fi
            if has-field 'maven-build-project-deploy-release-deploy-command'; then
              log-info "using maven deploy command from 'inputs.dsb-build-envs.maven-build-project-deploy-release-deploy-command'."
              MVN_CMD="$(get-val 'maven-build-project-deploy-release-deploy-command')"
            else
              log-info "using default maven deploy command."
              MVN_CMD="mvn -B --file ${POM_FILE} deploy -DskipTests"
            fi
          fi
        else
          log-error "unsupported github.event_name '${{ github.event_name }}' with github.event.action '${{ github.event.action }}'!"
          exit 1
        fi

        # export extra envs
        export-extra-envs "general" "${EXTRA_ENVS}"
        export-extra-envs "from github" "${EXTRA_ENVS_FROM_GH}"

        if [ -z "${MVN_VERSION_CMD}" ]; then
          log-info "Project version already set by maven."
        else
          # Expand any bash variables in maven command string
          MVN_VERSION_CMD=$(eval "echo $MVN_VERSION_CMD")
          start-group "Setting maven project version for deployment of artifacts"
          log-info "command string: '${MVN_VERSION_CMD}'"
          ${MVN_VERSION_CMD}
          end-group
        fi

        # Expand any bash variables in maven command string
        MVN_CMD=$(eval "echo $MVN_CMD")

        log-info "Parse maven deployment repos ..."
        # this creates an array with strings compatible with maven deploy mojo 'altDeploymentRepository' parameter
        # ref. https://maven.apache.org/plugins/maven-deploy-plugin/deploy-mojo.html
        export REPO_YML_KEY="${DEPLOY_TYPE}-repositories" # 'export' to make available to yq
        readarray -t DEPLOY_TO_REPOS_ARR < <(
          echo "${DEPLOY_TO_REPOS_YML}" |
            yq eval '
              .[strenv(REPO_YML_KEY)] |
              map (
                (. | key) as $key |
                [$key, .] | join("::default::")
              ).[]'
        )
        unset REPO_YML_KEY

        log-info "Deploying to ${#DEPLOY_TO_REPOS_ARR[@]} repo(s):"
        for DEPLOY_TO_REPO in "${DEPLOY_TO_REPOS_ARR[@]}"; do
          start-group "Deploy artifacts to '${DEPLOY_TO_REPO%::default*}'" # funky syntax removes everything from '::default'
          MVN_REPO_ARG="-DaltDeploymentRepository=${DEPLOY_TO_REPO}"
          log-info "command string: '${MVN_CMD} ${MVN_REPO_ARG}'"
          ${MVN_CMD} ${MVN_REPO_ARG}
          end-group
        done

        # remove extra envs
        unset-extra-envs "general" "${EXTRA_ENVS}"
        unset-extra-envs "from github" "${EXTRA_ENVS_FROM_GH}"
