name: "Build, tag and push docker image"
description: |
  Use standard docker actions to build docker image from Dockerfile.
  Standard DSB tags, labels and runtime environment variables are added before the image is finally pushed.
author: "Peder Schmedling"
inputs:
  dsb-build-envs:
    description: |
      DSB build environment variables JSON.
      Required fields:
        See first step.
      Optional fields:
        None.
    required: true
runs:
  using: "composite"
  steps:
    # verify we have required inputs in order to avoid blank labels/tags
    - uses: dsb-norge/github-actions/ci-cd/require-build-envs@v2
      with:
        dsb-build-envs: ${{ inputs.dsb-build-envs }}
        require: |
          application-image-id
          application-version
          application-name
          application-description
          application-vendor
          application-build-timestamp
          application-source
          application-source-revision
          application-source-path
          docker-image-registry
          acr-username
          acr-password

    # log into azure container registry (ACR)
    # TODO this project might be stale. Should migrate to https://github.com/marketplace/actions/docker-login instead
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ fromJSON(inputs.dsb-build-envs).docker-image-registry }}
        username: ${{ fromJSON(inputs.dsb-build-envs).acr-username }}
        password: ${{ fromJSON(inputs.dsb-build-envs).acr-password }}

    # generate tags and labels
    - uses: docker/metadata-action@v5
      id: meta
      with:
        images: ${{ fromJSON(inputs.dsb-build-envs).application-image-id }}
        flavor: latest=true
        tags: ${{ fromJSON(inputs.dsb-build-envs).application-version }}
        labels: |
          org.opencontainers.image.title=${{ fromJSON(inputs.dsb-build-envs).application-name }}
          org.opencontainers.image.description=${{ fromJSON(inputs.dsb-build-envs).application-description }}
          org.opencontainers.image.vendor=${{ fromJSON(inputs.dsb-build-envs).application-vendor }}
          org.opencontainers.image.created=${{ fromJSON(inputs.dsb-build-envs).application-build-timestamp }}
          org.opencontainers.image.source=${{ fromJSON(inputs.dsb-build-envs).application-source }}
          org.opencontainers.image.revision=${{ fromJSON(inputs.dsb-build-envs).application-source-revision }}

    # inject DSB ENVs into Dockerfile
    - id: add-envs
      shell: bash
      run: |
        # Add standard DSB ENVs to Dockerfile

        set -o allexport; source "${{ github.action_path }}/helpers.sh"; set +o allexport;

        # Locate Dockerfile
        DOCKER_FILE="${{ fromJSON(inputs.dsb-build-envs).application-source-path }}"
        [ ! -f "${DOCKER_FILE}" ] && DOCKER_FILE="${{ fromJSON(inputs.dsb-build-envs).application-source-path }}/Dockerfile"
        [ ! -f "${DOCKER_FILE}" ] && \
          log-error "Cannot locate Dockerfile. Both '${{ fromJSON(inputs.dsb-build-envs).application-source-path }}' and '${DOCKER_FILE}' does not exist!" && \
          exit 1

        # In case Dockerfile is missing trailing newline
        echo -n $'\n' >> "${DOCKER_FILE}"

        # Add DSB envs to Dockerfile
        cat << 'EOF' >> "${DOCKER_FILE}"
        ENV DSB_BUILDTIME=${{ fromJSON(inputs.dsb-build-envs).application-build-timestamp }}
        ENV DSB_VERSION=${{ fromJSON(inputs.dsb-build-envs).application-version }}
        ENV DSB_SOURCE=${{ fromJSON(inputs.dsb-build-envs).application-source }}
        ENV DSB_REVISION=${{ fromJSON(inputs.dsb-build-envs).application-source-revision }}
        EOF

        log-multiline 'Modified Dockerfile' "$(cat "${DOCKER_FILE}")"

    # build, tag and push docker image
    - uses: docker/build-push-action@v5
      with:
        pull: true
        push: true
        no-cache: true
        context: ${{ fromJSON(inputs.dsb-build-envs).application-source-path }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
