name: 'Build, tag and push docker image'
description: |
  Use standard docker actions to build docker image from Dockerfile.
  Standard DSB tags, labels and runtime environment variables are added before the image is finally pushed.
author: 'Direktoratet for samfunnssikkerhet og beredskap'
inputs:
  dsb-build-envs:
    description: |
      DSB build environment variables JSON.
      Required fields:
        See first step.
      Optional fields:
        None.
    required: true
runs:
  using: 'composite'
  steps:
    # verify we have required inputs in order to avoid blank labels/tags
    # TODO revert to @v3
    - uses: dsb-norge/github-actions/ci-cd/require-build-envs@playwright-e2e
      with:
        dsb-build-envs: ${{ inputs.dsb-build-envs }}
        require: |
          application-image-id
          application-version
          application-name
          application-description
          application-vendor
          application-build-timestamp
          application-source
          application-source-revision
          application-source-path
          docker-image-registry
          acr-username
          acr-password
          npmjs-token

    # log into azure container registry (ACR)
    - uses: azure/docker-login@v2
      with:
        login-server: ${{ fromJSON(inputs.dsb-build-envs).docker-image-registry }}
        username: ${{ fromJSON(inputs.dsb-build-envs).acr-username }}
        password: ${{ fromJSON(inputs.dsb-build-envs).acr-password }}

    - name: 'Re-tag Previous Image'
      # Condition: No changes, push/dispatch event, AND (it's a push on default OR a previous tag exists)
      if: |
        fromJSON(inputs.dsb-build-envs)['has-changes'] == false
        && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        && (
             (github.event_name == 'push' && fromJSON(inputs.dsb-build-envs)['caller-repo-is-on-default-branch'] == true)
             || fromJSON(inputs.dsb-build-envs)['application-previous-version-tag'] != null
           )
      env:
        # Determine the source tag (primarily for logging now)
        SOURCE_IMAGE_TAG_FOR_LOGGING: ${{ (github.event_name == 'push' && fromJSON(inputs.dsb-build-envs)['caller-repo-is-on-default-branch'] == true) && 'latest' || fromJSON(inputs.dsb-build-envs).application-previous-version-tag }}
        # Construct Source image directly using the conditional logic for the tag
        SOURCE_IMAGE: ${{ fromJSON(inputs.dsb-build-envs).docker-image-registry }}/${{ fromJSON(inputs.dsb-build-envs).docker-image-repo }}/${{ fromJSON(inputs.dsb-build-envs).application-name }}:${{ (github.event_name == 'push' && fromJSON(inputs.dsb-build-envs)['caller-repo-is-on-default-branch'] == true) && 'latest' || fromJSON(inputs.dsb-build-envs).application-previous-version-tag }}
        # Target image using the NEW application version tag
        TARGET_IMAGE: ${{ fromJSON(inputs.dsb-build-envs).docker-image-registry }}/${{ fromJSON(inputs.dsb-build-envs).docker-image-repo }}/${{ fromJSON(inputs.dsb-build-envs).application-name }}:${{ fromJSON(inputs.dsb-build-envs).application-version }}
      shell: bash
      run: |
        echo "No changes detected. Re-tagging previous image."
        echo "Source Tag Determined (for logging): ${{ env.SOURCE_IMAGE_TAG_FOR_LOGGING }}" # Log which tag we decided to use
        echo "Source Image: $SOURCE_IMAGE"
        echo "Target Image: $TARGET_IMAGE"

        # Optional: Pull the source image to ensure it exists locally before tagging.
        echo "Pulling source image $SOURCE_IMAGE..."
        docker pull "$SOURCE_IMAGE" || (echo "::error::Failed to pull source image $SOURCE_IMAGE. It might not exist or the previous tag is incorrect." && exit 1)

        echo "Tagging $SOURCE_IMAGE as $TARGET_IMAGE..."
        docker tag "$SOURCE_IMAGE" "$TARGET_IMAGE" || (echo "::error::Failed to tag image" && exit 1)

        echo "Pushing new tag $TARGET_IMAGE..."
        docker push "$TARGET_IMAGE" || (echo "::error::Failed to push new tag $TARGET_IMAGE" && exit 1)

        echo "Successfully re-tagged and pushed $TARGET_IMAGE."

    # generate tags and labels
    - uses: docker/metadata-action@v5
      if: fromJSON(inputs.dsb-build-envs)['has-changes'] == true
      id: meta
      with:
        images: ${{ fromJSON(inputs.dsb-build-envs).application-image-id }}
        flavor: latest=true
        tags: ${{ fromJSON(inputs.dsb-build-envs).application-version }}
        labels: |
          org.opencontainers.image.title=${{ fromJSON(inputs.dsb-build-envs).application-name }}
          org.opencontainers.image.description=${{ fromJSON(inputs.dsb-build-envs).application-description }}
          org.opencontainers.image.vendor=${{ fromJSON(inputs.dsb-build-envs).application-vendor }}
          org.opencontainers.image.created=${{ fromJSON(inputs.dsb-build-envs).application-build-timestamp }}
          org.opencontainers.image.source=${{ fromJSON(inputs.dsb-build-envs).application-source }}
          org.opencontainers.image.revision=${{ fromJSON(inputs.dsb-build-envs).application-source-revision }}

    - name: ðŸ¦• Deno install
      if: fromJSON(inputs.dsb-build-envs)['has-changes'] == true
      shell: bash
      run: deno install
      working-directory: ${{ github.action_path }}/../

    # inject DSB ENVs into Dockerfile
    - id: add-envs
      if: fromJSON(inputs.dsb-build-envs)['has-changes'] == true
      shell: bash
      env:
        INPUT_DSB_BUILD_ENVS: '${{ inputs.dsb-build-envs }}'
        GITHUB_WORKSPACE: '${{ github.workspace }}'
      run: deno run --allow-env --allow-read --allow-write ${{ github.action_path }}/action/add-envs.ts

    # build docker image only (no push) if nodejs-e2e-enabled is true
    - name: Build docker image (no push, E2E)
      if: fromJSON(inputs.dsb-build-envs)['has-changes'] == true && fromJSON(inputs.dsb-build-envs)['nodejs-e2e-enabled'] == true
      uses: docker/build-push-action@v6
      with:
        pull: true
        push: false
        no-cache: true
        context: ${{ fromJSON(inputs.dsb-build-envs).application-source-path }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Write .npmrc for Docker BuildKit
      if: fromJSON(inputs.dsb-build-envs)['has-changes'] == true && fromJSON(inputs.dsb-build-envs)['nodejs-e2e-enabled'] == true && fromJSON(inputs.dsb-build-envs)['npmjs-token']
      shell: bash
      run: |
        echo "//registry.npmjs.org/:_authToken=${{ fromJSON(inputs.dsb-build-envs).npmjs-token }}" > "${{ fromJSON(inputs.dsb-build-envs).application-source-path }}/.npmrc.dockerbuild"

    # build playwright image (Dockerfile.playwright) if nodejs-e2e-enabled is true
    - name: Build Playwright E2E image
      if: fromJSON(inputs.dsb-build-envs)['has-changes'] == true && fromJSON(inputs.dsb-build-envs)['nodejs-e2e-enabled'] == true
      uses: docker/build-push-action@v6
      with:
        pull: true
        push: false
        no-cache: true
        context: ${{ fromJSON(inputs.dsb-build-envs).application-source-path }}
        file: ${{ fromJSON(inputs.dsb-build-envs).application-source-path }}/Dockerfile.playwright
        tags: ${{ fromJSON(inputs.dsb-build-envs).application-image-id }}-playwright:local
        secret-files: |
          npmrc=${{ fromJSON(inputs.dsb-build-envs).application-source-path }}/.npmrc.dockerbuild

    - name: Remove .npmrc for Docker BuildKit
      if: fromJSON(inputs.dsb-build-envs)['has-changes'] == true && fromJSON(inputs.dsb-build-envs)['nodejs-e2e-enabled'] == true && fromJSON(inputs.dsb-build-envs)['npmjs-token']
      shell: bash
      run: rm -f "${{ fromJSON(inputs.dsb-build-envs).application-source-path }}/.npmrc.dockerbuild"

    # run E2E tests using Deno script orchestrator
    - name: Run Playwright E2E tests
      id: e2e-tests
      if: fromJSON(inputs.dsb-build-envs)['has-changes'] == true && fromJSON(inputs.dsb-build-envs)['nodejs-e2e-enabled'] == true
      shell: bash
      env:
        INPUT_DSB_BUILD_ENVS: '${{ inputs.dsb-build-envs }}'
        GITHUB_WORKSPACE: '${{ github.workspace }}'
      run: deno run --allow-env --allow-read --allow-write --allow-run=docker,cp --allow-net=0.0.0.0,127.0.0.1,localhost ${{ github.action_path }}/action/run-e2e.ts

    - name: Upload Playwright report
      if: always() && fromJSON(inputs.dsb-build-envs)['has-changes'] == true && fromJSON(inputs.dsb-build-envs)['nodejs-e2e-enabled'] == true && steps.e2e-tests.outputs.e2e-has-ran == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report
        path: playwright-report/
        if-no-files-found: error
        retention-days: 7

    - name: Post PR Comment with Playwright Report Summary
      if: always() && github.event_name == 'pull_request' && fromJSON(inputs.dsb-build-envs)['has-changes'] == true && fromJSON(inputs.dsb-build-envs)['nodejs-e2e-enabled'] == true && steps.e2e-tests.outputs.e2e-has-ran == 'true'
      uses: daun/playwright-report-summary@v3
      with:
        report-file: playwright-report/playwright-report.json

    # Check E2E test results and fail if tests failed
    - name: Check E2E test results
      if: fromJSON(inputs.dsb-build-envs)['has-changes'] == true && fromJSON(inputs.dsb-build-envs)['nodejs-e2e-enabled'] == true && steps.e2e-tests.outputs.e2e == 'failure'
      shell: bash
      run: |
        echo "::error::E2E tests failed. Stopping build."
        exit 1

    # push docker image after E2E if nodejs-e2e-enabled is true
    - name: Push docker image (after E2E)
      if: fromJSON(inputs.dsb-build-envs)['has-changes'] == true && fromJSON(inputs.dsb-build-envs)['nodejs-e2e-enabled'] == true
      uses: docker/build-push-action@v6
      with:
        pull: false
        push: true
        no-cache: false
        context: ${{ fromJSON(inputs.dsb-build-envs).application-source-path }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    # clean up playwright image after E2E
    - name: Remove Playwright E2E image
      if: fromJSON(inputs.dsb-build-envs)['has-changes'] == true && fromJSON(inputs.dsb-build-envs)['nodejs-e2e-enabled'] == true
      shell: bash
      run: docker rmi ${{ fromJSON(inputs.dsb-build-envs).application-image-id }}-playwright:local || true

    # build, tag and push docker image (default, no E2E)
    - uses: docker/build-push-action@v6
      if: fromJSON(inputs.dsb-build-envs)['has-changes'] == true && (!fromJSON(inputs.dsb-build-envs)['nodejs-e2e-enabled'])
      with:
        pull: true
        push: true
        no-cache: true
        context: ${{ fromJSON(inputs.dsb-build-envs).application-source-path }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
