name: "Create common DSB CI/CD variables"
description: |
  Given the required input this action returns common DSB build environment variables with values.
  Common DSB build environment variables are the values needed to successfully build and deploy an app in DSB's infrastructure.
  Some variables are slightly different if the build was triggered from a PR. This is to support PR builds and deployments.
  Where possible values from input 'app-vars' are preferred.
author: "Peder Schmedling"
inputs:
  app-vars:
    description: "Specifications of application to build and/or deploy, created by the create-app-vars workflow."
    required: true
  github-json:
    description: "The 'github' context as JSON, passed from the calling workflow with '{{ toJSON(github) }}'"
    required: true
  secrets-json:
    description: "The 'secrets' context as JSON, passed from the calling workflow with '{{ toJSON(secrets) }}'"
    required: true
  vars-json:
    description: "The 'vars' context as JSON, passed from the calling workflow with '{{ toJSON(vars) }}'"
    required: true
  application-source-path:
    description: "The path to the application source code."
    required: false
    default: "./"
  application-vendor:
    description: "Vendor of application being built. Added as label in docker image."
    required: false
    default: Norwegian Directorate for Civil Protection
  docker-image-registry:
    description: "Docker image registry to push built image and tags to."
    required: false
    default: dsbacr.azurecr.io
  docker-image-repo:
    description: 'Docker image repo within "docker-image-registry" to push built image and tags to.'
    required: false
    default: dsb-norge
  docker-image-prune-keep-min-images:
    description: |
      Minimum number of images to keep for a given application when performing prune on the application image repo.
      Note: For images built from PRs this has no effect. A hardcoded value will be used when pruning PR images.
      Also note: This setting will only affects images older than what is set for 'docker-image-prune-keep-num-days'.
    required: false
    default: "30"
  docker-image-prune-keep-num-days:
    description: |
      Minimum number of days that images will be preserved for a given application when performing prune on the application image repo.
      Note: For images built from PRs this has no effect. A hardcoded value will be used when pruning PR images.
      Also note: All images newer than given value will be preserved regardless of what is set for 'docker-image-prune-keep-min-images'.
    required: false
    default: "180"
  acr-username:
    description: 'Username for given "docker-image-registry", user must have push pull rights. Used for docker build and docker push.'
    required: false
    default: ""
  acr-password:
    description: 'Password for the user given in "acr-username".'
    required: false
    default: ""
  acr-service-principal:
    description: 'Service principal with rights to delete from "docker-image-registry" (ACR). Used for teardown operation of ephemeral PR environments.'
    required: false
    default: ""
  maven-user-settings-repositories-yml:
    description: |
      A YAML list (as string) with information about maven repositories that will be used to create a maven settings.xml prior to invoking maven.
      The order of the repositories dictates in what order maven will search the repos for artifacts.

      Since github actions do not support github variables in action input default values:
        A special syntax is supported to allow for substituting in the caller repo fields of the YAML list.
        Notice the missing dollar sign preceding the '{{ }}'-expression below.
        Example:
          When called from a repo 'foo' owned by the organization 'bar' and the configuration:
            url: "https://maven.pkg.github.com/{{ github.repository }}"
          becomes:
            url: "https://maven.pkg.github.com/bar/foo"
    required: false
    default: |
      repositories:
        # for consuming artifacts available in the org
        - id: "github-dsb-norge"
          name: "GitHub: dsb-norge"
          url: "https://maven.pkg.github.com/dsb-norge/.github"
          username: "${env.DSB_GH_PKG_READ_USER}" # org variable ref. 'maven-extra-envs-from-github-yml'
          password: "${env.DSB_GH_PKG_READ_PAT}"  # org secret ref. 'maven-extra-envs-from-github-yml'
        # for publishing artifacts to the calling repo
        - id: "calling-repo"
          name: "Calling GitHub repo"
          url: "https://maven.pkg.github.com/{{ github.repository }}"
          username: "${env.GH_ACTION_ACTOR}"        # the GitHub action actor
          password: "${env.GH_ACTION_ACTOR_TOKEN}"  # the GitHub action actor's token
  maven-extra-envs-from-github-yml:
    description: |
      A YAML map (as string) with extra environment variables to define in same scope as maven, prior to invoking maven.
      The value of the environment variables are retrieved from one of the three github contexts: secrets, vars or github.

      Example, create environment variable 'MY_VAR' with value from
      the variable 'MY_ORG_VARIABLE' (retrieved from the github context 'vars'):
      ```yml
      from-variables:
        MY_VAR: "MY_ORG_VARIABLE"
      ```

      Github contexts ref. https://docs.github.com/en/actions/learn-github-actions/contexts#inputs-context
    required: false
    default: |
      from-secrets:
        DSB_GH_PKG_READ_PAT: "ORG_GITHUB_PACKAGES_READER_PAT"
      from-variables:
        DSB_GH_PKG_READ_USER: "ORG_GITHUB_PACKAGES_READER_USERNAME"
      from-github-context:
        GH_ACTION_ACTOR: "actor"
        GH_ACTION_ACTOR_TOKEN: "token"
  maven-build-project-deploy-to-repositories-yml:
    description: |
      A YAML map (as string), when deploying maven artifacts maven will be invoked once for each key-value pair.
      Each 'key::value' will be passed as 'id::default::url' to the maven deploy mojo as parameter 'altDeploymentRepository':
        key   -> id     : The id can be used to pick up the correct credentials from settings.xml. The given id must exist in the 'maven-user-settings-repositories-yml' input.
        -     -> default: Hardcoded value for maven2 repo compatibility
        value -> url    : The location of the repository
      ref. https://maven.apache.org/plugins/maven-deploy-plugin/deploy-mojo.html

      Since github actions do not support github variables in action input default values:
        A special syntax is supported to allow for substituting in the caller repo into the 'value'.
        Notice the missing dollar sign preceding the '{{ }}'-expression below.
        Example:
          When called from a repo 'foo' owned by the organization 'bar' and the configuration:
            my-repo-id: "https://maven.pkg.github.com/{{ github.repository }}"
          the result would be:
            my-repo-id: "https://maven.pkg.github.com/bar/foo"
    required: false
    default: |
      release-repositories:
        calling-repo: "https://maven.pkg.github.com/{{ github.repository }}"
      snapshot-repositories:
        calling-repo: "https://maven.pkg.github.com/{{ github.repository }}"
  sonarqube-token:
    description: "Token used for SonarQube app, see https://docs.sonarqube.org/latest/analysis/github-integration/"
    required: true
  jasypt-password:
    description: 'Jasypt password. Will be passed to maven build as environment variable named "JASYPT_LOCAL_ENCRYPTOR_PASSWORD"'
    required: false
    default: ""
  java-version:
    description: "Version of java specified when calling actions/setup-java"
    required: false
    default: "11"
  java-distribution:
    description: "Distribution of Java specified when calling actions/setup-java"
    required: false
    default: temurin
  nodejs-version:
    description: "Version of Node.js specified when calling actions/setup-node"
    required: false
    default: "16"
  github-repo-token:
    description: "Github repo token is required by: 1) Maven Sonar plugin to get PR information; 2) Adding comments from actions to github PRs."
    required: true
  app-config-repo:
    description: |
      Repo containing application configuration for apps used during deploy to ephemeral environment and static environments.
      This input is required when deploying apps.'
    required: false
    default: "dsb-norge/azure-kubernetes-config"
  app-config-repo-token:
    description: "Token for performing checkout and commits to the above repo during deploy. This input is required when deploying apps."
    required: false
    default: ""
  static-deploy-environments:
    description: |
      Comma separated list of static environments to deploy to.
      Application configuration for these must be defined in 'app-config-repo'.
    required: false
    default: dev, test
  static-deploy-from-default-branch-only:
    description: |
      Set this to 'false' to allow deploying to static environments from other branches than the default branch.
      The default is to allow only deploys from the default branch.
    required: false
    default: "true"
  pr-deploy-app-config-branch:
    description: |
      Name of branch in "app-config-repo" potentially containing modified app config used during deploy to ephemeral
      environment. If branch does not exist deploy will fallback to HEAD @ default branch.'
    required: false
    default: "${{ github.head_ref }}"
  pr-deploy-aks-cluster-name:
    description: "Name of AKS instance to use during deploy to ephemeral environment. This input is required when deploying to to ephemeral environments."
    required: false
    default: "aks-rg7-ss2-cm-k8s-cluster-dev-1"
  pr-deploy-aks-resource-group:
    description: |
      Name of resource group where the AKS instance to use during deploy to ephemeral environment lives. This input is
      required when deploying to to ephemeral environments.'
    required: false
    default: "rg7-ss2-cm-k8s-dev"
  pr-deploy-aks-creds:
    description: |
      Credentials to the AKS instance to use during deploy to ephemeral environment. This input is required when
      deploying to to ephemeral environments.
    required: false
    default: ""
  pr-deploy-additional-helm-values:
    description: "Additional values.yml overrides passed to Helm. The multiline string is saved to file and and passed to Helm using --vaules option."
    required: false
    default: ""
  pr-deploy-argo-applications-url:
    description: "URL to applications overview in ArgoCD. Used when creating comments on PRs during deploy to ephemeral environments."
    required: false
    default: "https://argo.dev.dsbnorge.no/applications"
  pr-deploy-comment-prefix:
    description: |
      Used when creating comments on PRs during deploy to ephemeral environments. All comments will be prfixed with this string.
      It is also used when looking for comment(s) to delete prior to creating a new comment. I.e. make sure this is a bit uniqe
      or you will loose comments on our PR. This string will in turn be prefixed with application name.
    required: false
    default: "auto-deployed to ephemeral PR environment:"
  github-dependencies-cache-enabled:
    description: |
      Whether to enable GitHub actions cache for dependencies.
      When this is enabled the dependencies directory is emptied before each build and a caching strategy using GitHub actions cache is applied.
      In short the strategy is:
        - For the builds of the default branch:
          - A unique cache is created for each unique combination of runner OS, month of year and dependencies file (hash of pom/lock file(s)).
          - If a unique cache exist, use it. A new cache is not created after successful build.
          - If a unique cache does not exist, ignore the build dependencies file and fall back to using the previous cache based off of unique
            combination of runner OS and month of year. A new cache is created after successful build, taking into account the build dependencies
            file.
          - If no cache exists for the current month of year, create a new cache. I.e. full re-download of dependencies the first build each
            month of the year. This is to avoid the cache from growing uncontrolled. A new cache is created after the first successful build,
            taking into account runner OS, month of year and the build dependencies file.
        - For the builds of non-default branches:
          - Caches from the default branch are available to feature branches.
          - A unique cache is created for each unique combination of runner OS, pull request number and dependencies file (hash of pom/lock
            file(s)).
          - If a unique cache exist, use it. A new cache is not created after successful build.
          - If a unique cache does not exist, ignore the build dependencies file and fall back to using the previous cache based off of unique
            combination of runner OS and pull request number. A new cache is created after successful build, taking into account the build
            dependencies file.
          - If no cache exists for the current pull request number, fall back to using the latest available cache from the default branch. I.e.
            when dependencies in a feature branch diverges from those of the default branch and a unique cache does not exist for the feature
            branch, a new cache is created for the feature branch based off of the latest cache from the default branch.
          - Caches from feature branches are not available to other branches. Therefore caches of feature branches are deleted upon merge of
            the feature branch. This behavior can be changed by setting 'github-dependencies-cache-delete-on-pr-close' to 'false'
    required: false
    default: "true"
  github-dependencies-cache-delete-on-pr-close:
    description: |
      Whether to delete the associated GitHub actions cache for dependencies when a PR is closed.
      Due to cache isolation, caches from non-default branches are not available from other branches in the repo.
      See https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#restrictions-for-accessing-a-cache
      Set this to true to clean up on a faster cadence (than the default eviction policy) so as to ensure default branch is not thrashing.

      NOTE:
        `actions:write` permission is required to delete GitHub caches
        Ref: https://docs.github.com/en/rest/actions/cache?apiVersion=2022-11-28#delete-a-github-actions-cache-for-a-repository-using-a-cache-id
    required: false
    default: "true"
  github-dependencies-cache-path:
    description: |
      The path of where to restore to/save from when GitHub actions cache is enabled for dependencies.
      Leaving this empty causes the use of default value, which will vary depending on the 'application-type' field:
        - For maven application types (ex. 'spring-boot' and 'maven-library') this typically becomes "${HOME}/.m2/repository".
        - For node application types (ex. 'vue') this typically becomes "${HOME}/.npm".
    required: false
    default: "" # results in "${HOME}/.m2/repository"
outputs:
  json:
    description: "All envs as json"
    value: ${{ steps.build-env.outputs.json }}

runs:
  using: "composite"
  steps:
    # decide on git ref for app config repo branch
    - id: checkout-config-branch
      shell: bash
      env:
        GH_TOKEN: "${{ inputs.app-config-repo-token }}"
      run: |
        # Test if branch ${{ inputs.pr-deploy-app-config-branch }} exists in config repo

        set -o allexport; source "${{ github.action_path }}/helpers.sh"; set +o allexport;

        log-info 'Using GitHub token for application config repo from input 'app-config-repo-token' ...'
        GH_TOKEN_SANITIZED=${GH_TOKEN/ }
        mask-value "${GH_TOKEN_SANITIZED}"

        log-info 'Cloning branch "${{ inputs.pr-deploy-app-config-branch }}" of application repo "${{ inputs.app-config-repo }}" ...'
        TMP_FILE=./not-going-to-use-this
        if (
          git clone \
            --branch '${{ inputs.pr-deploy-app-config-branch }}' \
            "https://oauth2:${GH_TOKEN_SANITIZED}@github.com/${{ inputs.app-config-repo }}" \
            ${TMP_FILE}
        ); then
          set-output 'ref' "${{ inputs.pr-deploy-app-config-branch }}"
          log-info 'Ref "${{ inputs.pr-deploy-app-config-branch }}" exist in "${{ inputs.app-config-repo }}" and will be used for PR deploys.'
        else
          set-output 'ref' 'main'
          log-info 'Ref "${{ inputs.pr-deploy-app-config-branch }}" does not exist in "${{ inputs.app-config-repo }}", using "main" for PR deploys.'
        fi
        rm -rf ${TMP_FILE} || :

    # generate DSB build variables
    - id: build-env
      shell: bash
      env:
        APP_VARS_JSON: "${{ inputs.app-vars }}"
        # 'inputs.github-json' is loaded further down as it's too large to load into env var here, bash startup fails with argument too long
        SECRETS_JSON: "${{ inputs.secrets-json }}"
        VARS_JSON: "${{ inputs.vars-json }}"
        PR_HELM_VALUES_YML: "${{ inputs.pr-deploy-additional-helm-values }}"
        MVN_SETTINGS_REPOS_YML: "${{ inputs.maven-user-settings-repositories-yml }}"
        MVN_EXTRA_GH_ENVS_YML: "${{ inputs.maven-extra-envs-from-github-yml }}"
        MVN_DEPLOY_REPOS_YML: "${{ inputs.maven-build-project-deploy-to-repositories-yml }}"
        GH_EVENT_NUMBER: "${{ github.event.number }}"
        GH_TOKEN: "${{ github.token }}"
        CONFIG_BRANCH_REF: "${{ steps.checkout-config-branch.outputs.ref }}"
      run: |
        # Define variables needed for build and deploy of DSB apps

        set -o allexport; source "${{ github.action_path }}/helpers.sh"; set +o allexport;

        # log inputs without secrets
        log-multiline "action input 'app-vars', the app vars JSON specification" "${APP_VARS_JSON}"
        log-multiline "action input 'vars-json', the 'vars' context" "${VARS_JSON}"
        log-multiline "action input 'pr-deploy-additional-helm-values'" "${PR_HELM_VALUES_YML}"
        log-multiline "action input 'maven-extra-envs-from-github-yml'" "${MVN_EXTRA_GH_ENVS_YML}"
        log-multiline "action input 'maven-build-project-deploy-to-repositories-yml'" "${MVN_DEPLOY_REPOS_YML}"

        # all inputs to the action as json in env var
        ALL_ACTION_INPUTS=$(cat <<'EOF'
        ${{ toJSON(inputs) }}
        EOF
        )

        # github context as json in env var
        GITHUB_JSON="$(echo "${ALL_ACTION_INPUTS}" | jq -r '."github-json"')"

        # Calling repo branches information
        REPO_DEFAULT_BRANCH=$(curl -s https://api.github.com/repos/${GITHUB_REPOSITORY} -H "Authorization: bearer ${GH_TOKEN}" | jq -r .default_branch)
        REPO_CURRENT_BRANCH_IS_DEFAULT=false
        if [ "${GITHUB_REF_NAME}" == "${REPO_DEFAULT_BRANCH}" ]; then
          REPO_CURRENT_BRANCH_IS_DEFAULT=true
        fi

        # to prevent this action file from becoming too large, resulting in errors of the types:
        #   Error: The template is not valid. action.yml (Line: x, Col: y): Exceeded max expression length 21000
        # this step has been externalized into a separate file
        set -o allexport; source "${{ github.action_path }}/step-build-env.sh"; set +o allexport;

    - uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.build-env.outputs.build-envs-artifact-name }}
        path: ${{ steps.build-env.outputs.json-without-secrets-path }}
        if-no-files-found: error
        retention-days: 1
