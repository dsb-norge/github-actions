name: "Prune maven artifacts from GitHub packages of the calling repo"
description: |
  Performs pruning of maven artifacts (stored in GitHub packages) of the calling repo.
  Depending on the version name of the maven artifacts they are grouped into 3 'types': release, snapshot and other.
  Each of the 3 groups of artifacts will have different retention polices applied depending on the input values of the action.
  Overall mode of operation:
    1. Retrieve all GitHub packages of type 'maven' of the calling repo using the GitHub API via GitHub CLI.
    2. Group the maven packages based on version name. See details further down about how version name affects grouping.
    3. Consider versions of each package for pruning. See details further down about how/when each type is considered.
    4. If all versions of a package is scheduled for deletion, delete the whole package from GitHub packages.
    5. If any versions of a package is scheduled for deletion (but not all versions), delete each of the versions.
author: "Peder Schmedling"
inputs:
  # Maven artifacts are considered 'release' when their version matches DSB versioning scheme '[YY]YY.MM.DD.SSSSS'.
  # Maven 'release' artifacts for all packages of a given repo will be pruned according to 'release-prune-keep-*' below.
  # Maven 'release' artifacts ar not considered for pruning when the action is called from PR events.
  release-prune-keep-min-count:
    description: |
      Minimum number of maven release artifacts to always keep for each package. No matter the age of the package.
    required: true
  release-prune-keep-num-days:
    description: |
      Maven release artifacts will not be considered for pruning until this number of days has passed since they where last updated.
    required: true
  # Maven artifacts are considered 'snapshot' when their version matches DSB PR snapshot versioning scheme 'PR-[NUM]-SNAPSHOT'.
  # Maven 'snapshot' artifacts are not pruned during the lifetime of a PR.
  # Maven 'snapshot' artifacts are belonging to a specific PR will be deleted when the PR is merged or otherwise closed.
  # ADDITIONALLY:
  #   The 'snapshot-prune-keep-*' settings below affects how Maven 'snapshot' artifacts for the repo as a whole are pruned.
  #   This happens when this action is called from a non-PR event (eg. 'merge', 'workflow_dispatch' etc.).
  snapshot-prune-keep-min-count:
    description: |
      Minimum number of maven snapshot artifacts to keep for each package. No matter the age of the package.
    required: true
  snapshot-prune-keep-num-days:
    description: |
      Maven snapshot artifacts will not be considered for pruning until this number of days has passed since they where last updated.
    required: true
  # Maven artifacts are considered as 'other' if they are not considered as 'release' or 'snapshot'.
  # Maven 'other' artifacts for all packages of a given repo will be pruned according to 'other-prune-keep-*' below.
  # Maven 'other' artifacts ar not considered for pruning when the action is called from PR events.
  other-prune-keep-min-count:
    description: |
      Minimum number of other maven artifacts to keep for each package. No matter the age of the package.
    required: true
  other-prune-keep-num-days:
    description: |
      Other Maven artifacts will not be considered for pruning until this number of days has passed since they where last updated.
    required: true
  github-packages-token:
    description: |
      GitHub Personal Access Token (PAT) with scopes [delete:packages, read:packages] in the calling repos organization.
    required: true
  owner-and-repository-name:
    description: |
      Name of the owner (org. or user) and the repository name of where to look for packages.
      Ex. 'dsb-norge/github-actions'
      If this is left empty, the calling repo and organization/user will be used.
    default: ''
    required: false
  dry-run:
    description: |
      Non-destructive mode: If this flag is set to anything else than 'false' (default value) pruning/deletion will not occur.
    default: 'false'
    required: false
runs:
  using: "composite"
  steps:
    # get all packages of the calling repo including their versions
    - id: get-packages-and-versions
      env:
        PACKAGE_TYPE: "maven"
        GH_TOKEN: ${{ inputs.github-packages-token }}
      shell: bash
      run: |
        # Use github API from github CLI to retrieve repo packages and their versions

        set -o allexport; source "${{ github.action_path }}/helpers.sh"; set +o allexport;

        DRY_RUN_INPUT='${{ inputs.dry-run }}'
        if is-dry-run; then
          log-info 'ðŸ’« THIS IS A DRILL ðŸ’«'
          log-info 'I repeat'
          log-info 'ðŸ’« THIS IS A DRILL ðŸ’«'
          log-info 'NO DESTRUCTIVE OPERATIONS WILL BE PERFORMED DURING EXECUTION OF THIS ACTION'
          log-info '(even though log messages to follow would indicate otherwise)'
        fi

        if [ '' == '${{ inputs.owner-and-repository-name }}' ]; then
          REPO_WITH_OWNER="${GITHUB_REPOSITORY}"
          REPO_OWNER="${GITHUB_REPOSITORY_OWNER}"
        else
          REPO_WITH_OWNER='${{ inputs.owner-and-repository-name }}'
          REPO_OWNER="${REPO_WITH_OWNER%/*}" # remove suffix starting with '/'
        fi
        log-info "Repo owner is '${REPO_OWNER}'"
        log-info "Repo is '${REPO_WITH_OWNER}'"

        log-info "Read repo packages:"
        PACKAGES_RESPONSE=$(
          gh api \
            --paginate \
            -H "Accept: application/vnd.github+json" \
            "/orgs/${REPO_OWNER}/packages?package_type=${PACKAGE_TYPE}&per_page=100" \
            --jq "map(select(.repository.full_name == \"${REPO_WITH_OWNER}\"))"
        )

        PACKAGES_JSON=$(echo "${PACKAGES_RESPONSE}" | jq -s '. | flatten')
        PACKAGE_COUNT=$(echo "$PACKAGES_JSON" | jq -r '. | length')
        PACKAGE_NAMES=$(echo "$PACKAGES_JSON" | jq -r '. | .[].name' | sort)

        if [ "${PACKAGE_COUNT}" == '0' ]; then
          log-info "  The repo '${REPO_WITH_OWNER}' has no packages of type '${PACKAGE_TYPE}'."
        else
          log-multiline "${PACKAGE_COUNT} package(s) of type '${PACKAGE_TYPE}' in the repo '${REPO_WITH_OWNER}'" "${PACKAGE_NAMES}"
        fi

        OUTPUT_JSON='{}'
        for PACKAGE_NAME in ${PACKAGE_NAMES}; do
          log-info "  Read repo package '${PACKAGE_NAME}' ...:"
          PACKAGE_VERSIONS_COUNT=$(echo "$PACKAGES_JSON" | jq -r --arg packagename "${PACKAGE_NAME}" '. | select(.[].name == $packagename) | .[0].version_count')

          PACKAGE_VERSIONS=$(
            gh api \
              --paginate \
              -H "Accept: application/vnd.github+json" \
              "/orgs/${REPO_OWNER}/packages/${PACKAGE_TYPE}/${PACKAGE_NAME}/versions?per_page=100"
          )

          PACKAGE_VERSIONS_FOUND_COUNT=$(echo "${PACKAGE_VERSIONS}" | jq '. | length')
          if [ "${PACKAGE_VERSIONS_FOUND_COUNT}" == '0' ]; then
            log-info "  No versions found for the package '${PACKAGE_NAME}'."
          else
            if [ ! "${PACKAGE_VERSIONS_FOUND_COUNT}" == "${PACKAGE_VERSIONS_COUNT}" ]; then
              log-warn "The GitHub API is conflicted in regards to what number of versions exists of the package '${PACKAGE_NAME}' with type '${PACKAGE_TYPE}'."
              log-warn "${PACKAGE_VERSIONS_COUNT} versions was returned by 'https://api.github.com/orgs/${REPO_OWNER}/packages?package_type=${PACKAGE_TYPE}'."
              log-warn "Whilst ${PACKAGE_VERSIONS_FOUND_COUNT} versions was returned by 'https://api.github.com/orgs/${REPO_OWNER}/packages/${PACKAGE_TYPE}/${PACKAGE_NAME}/versions'."
              log-warn "The latter is used as source of truth."
            fi
            start-group "Found ${PACKAGE_VERSIONS_FOUND_COUNT} version(s):"

            PACKAGE_VERSIONS_GROUPED=$(
              echo "${PACKAGE_VERSIONS}" |
                jq \
                  --arg packagename "${PACKAGE_NAME}" \
                  --arg packagetype "${PACKAGE_TYPE}" \
                  '
                  (.) as $data
                  | ($data | map(select(.name | ascii_upcase | test("^\\d{2}(\\d{2})?\\.\\d{2}\\.\\d{2}\\.\\d{1,5}$") )) | sort_by(.updated_at) ) as $releases
                  | ($data | map(select(.name | ascii_upcase | test("^PR-\\d+-SNAPSHOT$") ))                             | sort_by(.updated_at) ) as $snapshots
                  | ($data | map(select(
                      (.name | ascii_upcase | test("^\\d{2}(\\d{2})?\\.\\d{2}\\.\\d{2}\\.\\d{1,5}$") | not)
                      and (.name | ascii_upcase | test("^PR-\\d+-SNAPSHOT$") | not)
                    )) | sort_by(.updated_at) ) as $others
                  | { ($packagename) : {
                    "type":      $packagetype,
                    "releases":  { "count": ($releases  | length), "versions": $releases  },
                    "snapshots": { "count": ($snapshots | length), "versions": $snapshots },
                    "others":    { "count": ($others    | length), "versions": $others    },
                  } }'
            )

            log-info " - releases  : $(echo "${PACKAGE_VERSIONS_GROUPED}" | jq --arg packagename "${PACKAGE_NAME}" '. | .[$packagename].releases.count | length')"
            log-info " - snapshots : $(echo "${PACKAGE_VERSIONS_GROUPED}" | jq --arg packagename "${PACKAGE_NAME}" '. | .[$packagename].snapshots.count | length')"
            log-info " - other     : $(echo "${PACKAGE_VERSIONS_GROUPED}" | jq --arg packagename "${PACKAGE_NAME}" '. | .[$packagename].others.count | length')"

            end-group

            OUTPUT_JSON=$(echo "${OUTPUT_JSON}" | jq --argjson packagejson "${PACKAGE_VERSIONS_GROUPED}" '.+ $packagejson')

          fi
        done # loop PACKAGE_NAMES

        log-multiline "${PACKAGE_TYPE} packages JSON for repo" "${OUTPUT_JSON}"

        TOTAL_VERSIONS_COUNT=$(echo "${OUTPUT_JSON}" | jq '. | map(.releases.count + .snapshots.count + .others.count) | add')

        set-output 'total-versions-count' "${TOTAL_VERSIONS_COUNT}"
        set-multiline-output 'json' "${OUTPUT_JSON}"

    # parse repo packages + versions to determine versions and packages to delete
    - id: get-what-to-delete
      # skip this step if there are no package versions to evaluate for pruning
      if: steps.get-packages-and-versions.outputs.total-versions-count > 0
      env:
        PACKAGES_JSON: "${{ steps.get-packages-and-versions.outputs.json }}"
        KEEP_RELEASES_COUNT: ${{ inputs.release-prune-keep-min-count }}
        KEEP_RELEASES_DAYS: ${{ inputs.release-prune-keep-num-days }}
        KEEP_SNAPSHOTS_COUNT: ${{ inputs.snapshot-prune-keep-min-count }}
        KEEP_SNAPSHOTS_DAYS: ${{ inputs.snapshot-prune-keep-num-days }}
        KEEP_OTHERS_COUNT: ${{ inputs.other-prune-keep-min-count }}
        KEEP_OTHERS_DAYS: ${{ inputs.other-prune-keep-num-days }}
        PR_NUMBER: ${{ github.event.number }}
        IS_PR: ${{ github.event_name == 'pull_request' }}
        CLOSING_PR: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' }}
      shell: bash
      run: |
        # Determine versions and packages to delete

        set -o allexport; source "${{ github.action_path }}/helpers.sh"; set +o allexport;

        # will contain version types to be considered for pruning.
        declare -a CONSIDER_VERSION_TYPES

        if [ '' == '${{ inputs.owner-and-repository-name }}' ]; then
          REPO_OWNER="${GITHUB_REPOSITORY_OWNER}"
        else
          REPO_WITH_OWNER='${{ inputs.owner-and-repository-name }}'
          REPO_OWNER="${REPO_WITH_OWNER%/*}" # remove suffix starting with '/'
        fi
        log-info "Repo owner is '${REPO_OWNER}'"

        if ${IS_PR}; then
          if ${CLOSING_PR}; then
            log-info "Called from a closing PR, snapshots will be deleted not pruned."

            # always delete PR snapshots when closing a PR
            KEEP_SNAPSHOTS_COUNT=0
            KEEP_SNAPSHOTS_DAYS=0
            CONSIDER_VERSION_TYPES+=(snapshots)

            # additional filter to look only for snapshots from the calling PR
            PR_SNAPSHOT_NAME="PR-${PR_NUMBER}-SNAPSHOT"
            JQ_FILTER_CANDIDATES=". | map(select( .name | ascii_upcase | test(\"^${PR_SNAPSHOT_NAME}\$\") ))"
          else
            log-info "Called from PR but not a closing action, nothing will not be considered for pruning."
          fi
        else
          # not PR consider releases and others for pruning
          log-info "Not called from a PR."
          CONSIDER_VERSION_TYPES+=(releases snapshots others)

          # no additional filtering in this case, ie. ALL snapshots in repo will be considered
          JQ_FILTER_CANDIDATES=''
        fi

        # easier access to config further down
        declare -A PRUNE_CONFIG
        PRUNE_CONFIG[releases, count]="${KEEP_RELEASES_COUNT}"
        PRUNE_CONFIG[releases, days]="${KEEP_RELEASES_DAYS}"
        PRUNE_CONFIG[snapshots, count]="${KEEP_SNAPSHOTS_COUNT}"
        PRUNE_CONFIG[snapshots, days]="${KEEP_SNAPSHOTS_DAYS}"
        PRUNE_CONFIG[others, count]="${KEEP_OTHERS_COUNT}"
        PRUNE_CONFIG[others, days]="${KEEP_OTHERS_DAYS}"

        # these arrays will be the outputs of this step
        PACKAGES_TO_DELETE='[]'
        VERSIONS_TO_DELETE='[]'

        if [[ "${#CONSIDER_VERSION_TYPES[@]}" == '0' ]]; then
          log-info "No package type(s) are being considered for pruning."
        else
          log-info "Versions of the following package type(s) are being considered: ${CONSIDER_VERSION_TYPES[*]}"

          # loop all packages and evaluate pruning of versions for each
          PACKAGE_NAMES=$(echo "${PACKAGES_JSON}" | jq -r '. | keys | .[]')
          for PACKAGE_NAME in ${PACKAGE_NAMES}; do
            start-group "Package '${PACKAGE_NAME}':"

            PACKAGE_VERSION_COUNT=$(echo "${PACKAGES_JSON}" | jq -r --arg packagename "${PACKAGE_NAME}" '.[$packagename] | .releases.count + .snapshots.count + .others.count')
            PACKAGE_TYPE=$(echo "${PACKAGES_JSON}" | jq -r --arg packagename "${PACKAGE_NAME}" '.[$packagename] | .type')

            log-info " Total version(s) of package: ${PACKAGE_VERSION_COUNT}"
            log-info " Package type: ${PACKAGE_TYPE}"

            # all versions of the package to be deleted are appended to this array
            PACKAGE_DISCARD_VERSIONS='[]'

            # loop over the version types to evaluate, ie. releases, snapshots and/or others
            for VERSION_TYPE in "${CONSIDER_VERSION_TYPES[@]}"; do

              log-info " ${VERSION_TYPE}:"
              KEEP_COUNT="${PRUNE_CONFIG[${VERSION_TYPE}, count]}"
              KEEP_DAYS="${PRUNE_CONFIG[${VERSION_TYPE}, days]}"

              log-info "  - Keep count: ${KEEP_COUNT}"
              log-info "  - Min days to keep: ${KEEP_DAYS}"

              # get candidates for pruning
              CONSIDER_VERSIONS="$(
                echo "${PACKAGES_JSON}" |
                  jq \
                    --arg packagename "${PACKAGE_NAME}" \
                    --arg versiontype "${VERSION_TYPE}" \
                    '.[$packagename] | .[$versiontype] | .versions'
              )"

              # additional filtering of candidates required?
              if [ ! "${JQ_FILTER_CANDIDATES}" == '' ]; then
                CONSIDER_VERSIONS="$(echo "${CONSIDER_VERSIONS}" | jq "${JQ_FILTER_CANDIDATES}")"
              fi
              CONSIDER_VERSIONS_COUNT=$(echo "${CONSIDER_VERSIONS}" | jq 'length')

              # look for versions to discard
              PRUNE_BEFORE_EPOCH=$(date +%s -d "${KEEP_DAYS} days ago")
              DISCARD_VERSIONS=$(
                echo "${CONSIDER_VERSIONS}" |
                  # using --argjson to make sure keep_count is treated as number
                  jq \
                    --argjson count "${KEEP_COUNT}" \
                    --argjson cutoff_epoch "${PRUNE_BEFORE_EPOCH}" \
                    'sort_by(.updated_at) | reverse | .[$count:] | map(select( .updated_at | fromdateiso8601 < $cutoff_epoch ))'
              )

              DISCARD_VERSIONS_COUNT=$(echo "${DISCARD_VERSIONS}" | jq 'length')
              log-info "  - ${DISCARD_VERSIONS_COUNT} of ${CONSIDER_VERSIONS_COUNT} ${VERSION_TYPE} should be discarded"

              # append to array of all versions to delete for given package
              PACKAGE_DISCARD_VERSIONS="$( (
                echo "${PACKAGE_DISCARD_VERSIONS}"
                echo "${DISCARD_VERSIONS}"
              ) | jq '. + input')"

            done # loop CONSIDER_VERSION_TYPES

            # the number of versions to delete for given package
            PACKAGE_DISCARD_VERSIONS_COUNT=$(echo "${PACKAGE_DISCARD_VERSIONS}" | jq -r 'length')
            log-info " Total: ${PACKAGE_DISCARD_VERSIONS_COUNT} out of ${PACKAGE_VERSION_COUNT} version(s) scheduled for deletion."

            # append to output as necessary
            # note that we craft custom JSON objects containing all information required to perform the delete operation later on
            if [ "${PACKAGE_VERSION_COUNT}" == "${PACKAGE_DISCARD_VERSIONS_COUNT}" ]; then
              # not possible to delete all versions of a package, the package should be deleted instead
              log-info " The package '${PACKAGE_NAME}' will be deleted as all versions of the package are scheduled for deletion."

              # append to packages to delete output
              PACKAGES_TO_DELETE="$(
                echo "${PACKAGES_TO_DELETE}" | jq \
                  --arg org "${REPO_OWNER}" \
                  --arg packagetype "${PACKAGE_TYPE}" \
                  --arg packagename "${PACKAGE_NAME}" \
                  '. + [{
                    "org": $org,
                    "package_type": $packagetype,
                    "package_name": $packagename,
                  }]'
              )"
            else
              # append to versions to delete output
              VERSIONS_TO_DELETE="$(
                (
                  echo "${VERSIONS_TO_DELETE}"
                  echo "${PACKAGE_DISCARD_VERSIONS}"
                ) | jq \
                  --arg org "${REPO_OWNER}" \
                  --arg packagename "${PACKAGE_NAME}" \
                  '. + (
                    input
                    | map({
                      "org": $org,
                      "package_type": .metadata.package_type,
                      "package_name": $packagename,
                      "package_version_id": .id,
                      "package_version_name": .name,
                      "package_version_updated_at": .updated_at,
                    })
                  )'
              )"
            fi

            end-group

          done # loop PACKAGE_NAMES

        fi # got types to consider

        PACKAGES_TO_DELETE_COUNT=$(echo "${PACKAGES_TO_DELETE}" | jq -r 'length')
        if [ "${PACKAGES_TO_DELETE_COUNT}" == '0' ]; then
          log-info "No packages will be deleted."
        else
          log-multiline "${PACKAGES_TO_DELETE_COUNT} package(s) will be deleted" "${PACKAGES_TO_DELETE}"
        fi

        VERSIONS_TO_DELETE_COUNT=$(echo "${VERSIONS_TO_DELETE}" | jq -r 'length')
        if [ "${VERSIONS_TO_DELETE_COUNT}" == '0' ]; then
          log-info "No package versions will be deleted."
        else
          log-multiline "${VERSIONS_TO_DELETE_COUNT} package version(s) will be deleted" "${VERSIONS_TO_DELETE}"
        fi

        set-output 'delete-packages-count' "${PACKAGES_TO_DELETE_COUNT}"
        set-output 'delete-versions-count' "${VERSIONS_TO_DELETE_COUNT}"
        set-multiline-output 'delete-packages-json' "${PACKAGES_TO_DELETE}"
        set-multiline-output 'delete-versions-json' "${VERSIONS_TO_DELETE}"

    - id: delete-packages
      # skip this step if there are no packages to delete
      if: steps.get-what-to-delete.outputs.delete-packages-count > 0
      env:
        PACKAGES_TO_DELETE: "${{ steps.get-what-to-delete.outputs.delete-packages-json }}"
        GH_TOKEN: ${{ inputs.github-packages-token }}
      shell: bash
      run: |
        # Delete package(s)

        set -o allexport; source "${{ github.action_path }}/helpers.sh"; set +o allexport;

        DRY_RUN_INPUT='${{ inputs.dry-run }}'
        if is-dry-run; then
          log-info 'Dry run requested. No packages will ACTUALLY be deleted.'
        fi

        # loop and delete one at a time, postpone failing on error until end
        start-group "Deleting packages ..."
        declare -A GH_CLI_EXITCODES
        while IFS= read -r GITHUB_ORG &&
          IFS= read -r PACKAGE_TYPE &&
          IFS= read -r PACKAGE_NAME; do

          log-info "Deleting ${PACKAGE_TYPE} package named '${PACKAGE_NAME}' ..."
          if is-dry-run; then
            GH_CLI_EXITCODES[${PACKAGE_NAME}]="0"
          else
            set +e
            gh api \
              --method DELETE \
              -H "Accept: application/vnd.github+json" \
              "/orgs/${GITHUB_ORG}/packages/${PACKAGE_TYPE}/${PACKAGE_NAME}"
            GH_CLI_EXITCODE=${?}
            set -e
            GH_CLI_EXITCODES[${PACKAGE_NAME}]="${GH_CLI_EXITCODE}"
          fi
          if [ "${GH_CLI_EXITCODES[${PACKAGE_NAME}]}" == "0" ]; then
            log-info "Done."
          else
            log-error "GitHub CLI failed during delete operation with code '${GH_CLI_EXITCODE}'!"
          fi
        done < <(
          jq -r '.[] | (
            .org,
            .package_type,
            .package_name
          )' <<<"${PACKAGES_TO_DELETE}"
        )
        end-group

        # exit with sum of exit codes
        GH_CLI_SUM_EXIT_CODES=$(
          IFS=+
          echo "$((${GH_CLI_EXITCODES[*]}))"
        )
        exit ${GH_CLI_SUM_EXIT_CODES}

    - id: delete-versions
      # skip this step if there are no versions to delete
      # run step even if package delete fails (but not when package delete was 'cancelled')
      if: >-
        steps.get-what-to-delete.outputs.delete-versions-count > 0 && (
             steps.delete-packages.conclusion == 'success'
          || steps.delete-packages.conclusion == 'failure'
          || steps.delete-packages.conclusion == 'skipped'
        )
      env:
        VERSIONS_TO_DELETE: "${{ steps.get-what-to-delete.outputs.delete-versions-json }}"
        GH_TOKEN: ${{ inputs.github-packages-token }}
      shell: bash
      run: |
        # Delete version(s)

        set -o allexport; source "${{ github.action_path }}/helpers.sh"; set +o allexport;

        DRY_RUN_INPUT='${{ inputs.dry-run }}'
        if is-dry-run; then
          log-info 'Dry run requested. No versions will ACTUALLY be deleted.'
        fi

        # loop and delete one at a time, postpone failing on error until end
        start-group "Deleting package versions ..."
        declare -A GH_CLI_EXITCODES
        while IFS= read -r GITHUB_ORG &&
          IFS= read -r PACKAGE_TYPE &&
          IFS= read -r PACKAGE_NAME &&
          IFS= read -r VERSION_ID &&
          IFS= read -r VERSION_NAME &&
          IFS= read -r VERSION_UPDATED_AT; do

          log-info "Deleting version '${VERSION_NAME}' last updated ${VERSION_UPDATED_AT} ..."
          if is-dry-run; then
            GH_CLI_EXITCODES[${VERSION_ID}]="0"
          else
            set +e
            gh api \
              --method DELETE \
              -H "Accept: application/vnd.github+json" \
              "/orgs/${GITHUB_ORG}/packages/${PACKAGE_TYPE}/${PACKAGE_NAME}/versions/${VERSION_ID}"
            GH_CLI_EXITCODE=${?}
            set -e
            GH_CLI_EXITCODES[${VERSION_ID}]="${GH_CLI_EXITCODE}"
          fi
          if [ "${GH_CLI_EXITCODES[${VERSION_ID}]}" == "0" ]; then
            log-info "Done."
          else
            log-error "GitHub CLI failed during delete operation with code '${GH_CLI_EXITCODE}'!"
          fi
        done < <(
          jq -r '.[] | (
            .org,
            .package_type,
            .package_name,
            .package_version_id,
            .package_version_name,
            .package_version_updated_at
          )' <<<"${VERSIONS_TO_DELETE}"
        )
        end-group

        # exit with sum of exit codes
        GH_CLI_SUM_EXIT_CODES=$(
          IFS=+
          echo "$((${GH_CLI_EXITCODES[*]}))"
        )
        exit ${GH_CLI_SUM_EXIT_CODES}
