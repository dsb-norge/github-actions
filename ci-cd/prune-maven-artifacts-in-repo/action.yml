name: 'Prune maven artifacts from GitHub packages of the calling repo'
description: |
  Performs pruning of maven artifacts (stored in GitHub packages) of the calling repo using Deno/TypeScript.
  Groups artifacts into 'release', 'snapshot', and 'other' based on version naming conventions.
  Applies configurable retention policies (minimum count, age in days) for each group.
  Handles PR-specific logic (e.g., deleting snapshots on PR close, avoiding release/other pruning during open PRs).
author: 'Direktoratet for samfunnssikkerhet og beredskap'
inputs:
  release-prune-keep-min-count:
    description: |
      Minimum number of 'release' artifacts ([YY]YY.MM.DD.SSSSS) to keep per package, regardless of age. Not pruned during PRs.
    required: true
  release-prune-keep-num-days:
    description: |
      Minimum age in days before 'release' artifacts are considered for pruning. Not pruned during PRs.
    required: true
  snapshot-prune-keep-min-count:
    description: |
      Minimum number of 'snapshot' artifacts (PR-[NUM]-SNAPSHOT) to keep per package when pruning outside of a closing PR context.
    required: true
  snapshot-prune-keep-num-days:
    description: |
      Minimum age in days before 'snapshot' artifacts are considered for pruning outside of a closing PR context.
    required: true
  other-prune-keep-min-count:
    description: |
      Minimum number of 'other' artifacts (neither release nor snapshot) to keep per package, regardless of age. Not pruned during PRs.
    required: true
  other-prune-keep-num-days:
    description: |
      Minimum age in days before 'other' artifacts are considered for pruning. Not pruned during PRs.
    required: true
  github-packages-token:
    description: |
      GitHub Token (e.g., PAT) with scopes [delete:packages, read:packages] for the target repository's organization/user.
    required: true
  owner-and-repository-name:
    description: |
      Target repository (e.g., 'owner/repo'). Defaults to the calling repository (GITHUB_REPOSITORY).
    default: ''
    required: false
  dry-run:
    description: |
      If 'true', logs intended deletions but performs no actual destructive actions. Defaults to 'false'.
    default: 'false'
    required: false
outputs:
  delete-packages-count:
    description: 'Number of packages identified for deletion.'
    value: ${{ steps.process-packages.outputs.delete-packages-count }}
  delete-versions-count:
    description: 'Number of package versions identified for deletion.'
    value: ${{ steps.process-packages.outputs.delete-versions-count }}
  delete-packages-json:
    description: 'JSON array of packages identified for deletion.'
    value: ${{ steps.process-packages.outputs.delete-packages-json }}
  delete-versions-json:
    description: 'JSON array of package versions identified for deletion.'
    value: ${{ steps.process-packages.outputs.delete-versions-json }}
runs:
  using: 'composite'
  steps:
    - name: ðŸ¦• Deno install
      shell: bash
      run: deno install
      working-directory: ${{ github.action_path }}/../ # Assumes common is one level up

    - id: process-packages
      name: Process Packages and Determine Deletions
      shell: bash
      env:
        # Pass inputs explicitly for clarity and control
        INPUT_RELEASE_PRUNE_KEEP_MIN_COUNT: ${{ inputs.release-prune-keep-min-count }}
        INPUT_RELEASE_PRUNE_KEEP_NUM_DAYS: ${{ inputs.release-prune-keep-num-days }}
        INPUT_SNAPSHOT_PRUNE_KEEP_MIN_COUNT: ${{ inputs.snapshot-prune-keep-min-count }}
        INPUT_SNAPSHOT_PRUNE_KEEP_NUM_DAYS: ${{ inputs.snapshot-prune-keep-num-days }}
        INPUT_OTHER_PRUNE_KEEP_MIN_COUNT: ${{ inputs.other-prune-keep-min-count }}
        INPUT_OTHER_PRUNE_KEEP_NUM_DAYS: ${{ inputs.other-prune-keep-num-days }}
        INPUT_GITHUB_PACKAGES_TOKEN: ${{ inputs.github-packages-token }}
        INPUT_OWNER_AND_REPOSITORY_NAME: ${{ inputs.owner-and-repository-name }}
        # Pass relevant GitHub context env vars
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        GITHUB_EVENT_ACTION: ${{ github.event.action }}
        GITHUB_EVENT_NUMBER: ${{ github.event.number }}
      run: |
        deno run \
          --allow-env --allow-read --allow-write \
          --allow-net=api.github.com \
          ${{ github.action_path }}/action/1_process_packages.ts

    - id: execute-deletions
      name: Execute Deletions
      # Run only if packages or versions were identified for deletion
      if: steps.process-packages.outputs.delete-packages-count > 0 || steps.process-packages.outputs.delete-versions-count > 0
      shell: bash
      env:
        INPUT_GITHUB_PACKAGES_TOKEN: ${{ inputs.github-packages-token }}
        INPUT_DRY_RUN: ${{ inputs.dry-run }}
        # Pass JSON outputs from the previous step
        DELETE_PACKAGES_JSON: ${{ steps.process-packages.outputs.delete-packages-json }}
        DELETE_VERSIONS_JSON: ${{ steps.process-packages.outputs.delete-versions-json }}
      run: |
        deno run \
          --allow-env --allow-read --allow-write \
          --allow-net=api.github.com \
          ${{ github.action_path }}/action/2_execute_deletions.ts
