name: "Deploy DSB app to ephemeral environment"
description: |
  Deploys a DSB app to an ephemeral namspace in a given AKS cluster using custom helm charts and Argo CD.
  Application and helm configuration is retrieved from an external git repo.
  This action will attempt to check out a branch from the configuration repo named by the field
  'config-repo-branch-name' in the 'dsb-build-envs' input. If this does not succeed HEAD @ main branch will be used for configuration instead.
author: "Peder Schmedling"
inputs:
  dsb-build-envs:
    description: |
      DSB build environment variables JSON.
      Required fields:
        See first step.
      Optional fields:
        pr-deploy-additional-helm-values (must exist, can be empty).
        pr-deploy-comment-additional-text (must exist, can be empty).
    required: true
runs:
  using: "composite"
  steps:
    # we need to verify inputs since they are optional input to create-build-envs action
    - uses: dsb-norge/github-actions/ci-cd/require-build-envs@v2
      with:
        dsb-build-envs: ${{ inputs.dsb-build-envs }}
        require: |
          app-config-repo
          app-config-repo-token
          pr-deploy-app-config-branch
          pr-deploy-aks-cluster-name
          pr-deploy-aks-resource-group
          pr-deploy-aks-creds
          pr-deploy-k8s-namespace
          pr-deploy-k8s-application-name
          pr-deploy-argo-applications-url
          pr-deploy-comment-prefix
          application-name
          application-image-id
          application-version
          application-description

    # checkout config repo
    - uses: actions/checkout@v4
      with:
        repository: ${{ fromJSON(inputs.dsb-build-envs).app-config-repo }}
        ref: ${{ fromJSON(inputs.dsb-build-envs).pr-deploy-app-config-branch }}
        token: ${{ fromJSON(inputs.dsb-build-envs).app-config-repo-token }}
        path: ./_pr-deploy

    - id: check-dir-tree
      shell: bash
      run: |
        # Look for files and directories

        set -o allexport; source "${{ github.action_path }}/helpers.sh"; set +o allexport;

        ROOT_DIR=./_pr-deploy
        PREVIEW_DIR="${ROOT_DIR}/preview"
        APPS_DIR="${ROOT_DIR}/apps"
        ENV_DIR="${APPS_DIR}/dev"

        EXIT_CODE=0
        if [ ! -d "${ROOT_DIR}" ]; then
          log-error "Unable to find config repo root directory '${ROOT_DIR}' after checkout!"
          EXIT_CODE=1
        fi
        if [ ! -d "${PREVIEW_DIR}" ]; then
          log-error "Unable to find preview chart directory '${PREVIEW_DIR}' within config repo!"
          EXIT_CODE=1
        fi
        if [ ! -d "${APPS_DIR}" ]; then
          log-error "Unable to find apps directory '${APPS_DIR}' within config repo!"
          EXIT_CODE=1
        fi
        if [ ! -d "${ENV_DIR}" ]; then
          log-error "Unable to find environment directory '${ENV_DIR}' under apps directory '${APPS_DIR}'!"
          EXIT_CODE=1
        fi

        exit ${EXIT_CODE}

    # test for additional Helm values and save to file
    - id: helm-values
      shell: bash
      run: |
        # Save pr-deploy-additional-helm-values to file if defined

        set -o allexport; source "${{ github.action_path }}/helpers.sh"; set +o allexport;

        start-group "additional helm value overrides"
        VALUES_FILE=./_pr-deploy/pr-deploy-additional-helm-values.yml
        log-info "Writing to file: ${VALUES_FILE}"
        tee ${VALUES_FILE} <<'EOF'
        ${{ fromJSON(inputs.dsb-build-envs).pr-deploy-additional-helm-values }}
        EOF
        end-group

        if [ -z "$(cat ${VALUES_FILE})" ]; then
          set-output 'commandline-parameter' ''
        else
          set-output 'commandline-parameter' "--values ${VALUES_FILE}"
        fi

    - uses: azure/login@v2
      with:
        creds: ${{ inputs.dsb-build-envs && fromJSON(inputs.dsb-build-envs).pr-deploy-aks-creds }}

    # set target kubernetes cluster to
    - uses: azure/aks-set-context@v4
      with:
        cluster-name: ${{ fromJSON(inputs.dsb-build-envs).pr-deploy-aks-cluster-name }}
        resource-group: ${{ fromJSON(inputs.dsb-build-envs).pr-deploy-aks-resource-group }}
        admin: "true"

    - id: helm-install
      shell: bash
      run: |
        # Perform Helm install with additional helm values if any

        set -o allexport; source "${{ github.action_path }}/helpers.sh"; set +o allexport;

        start-group 'helm upgrade --install'
        helm upgrade --install --atomic \
          --create-namespace \
          --namespace ${{ fromJSON(inputs.dsb-build-envs).pr-deploy-k8s-namespace }} \
          --set application=${{ fromJSON(inputs.dsb-build-envs).application-name }} \
          --set parameters.dsb-spring-boot\\.image=${{ fromJSON(inputs.dsb-build-envs).application-image-id }} \
          --set parameters.dsb-spring-boot\\.tag=${{ fromJSON(inputs.dsb-build-envs).application-version }} \
          --set parameters.dsb-nginx-frontend\\.image=${{ fromJSON(inputs.dsb-build-envs).application-image-id }} \
          --set parameters.dsb-nginx-frontend\\.tag=${{ fromJSON(inputs.dsb-build-envs).application-version }} \
          --set parameters.dsb-spring-boot-job\\.image=${{ fromJSON(inputs.dsb-build-envs).application-image-id }} \
          --set parameters.dsb-spring-boot-job\\.tag=${{ fromJSON(inputs.dsb-build-envs).application-version }} \
          --set gitTargetRevision=${{ fromJSON(inputs.dsb-build-envs).pr-deploy-app-config-branch }} \
          ${{ steps.helm-values.outputs.commandline-parameter }} \
          ${{ fromJSON(inputs.dsb-build-envs).pr-deploy-k8s-application-name }} \
          ./_pr-deploy/preview/
        end-group

    # create comment to be added to PR
    - id: create-comment
      shell: bash
      run: |
        # Create comment to be added to PR

        set -o allexport; source "${{ github.action_path }}/helpers.sh"; set +o allexport;

        # The start of this comment must match exactly DELETE_COMMENTS_WITH_PREFIX in the next action
        COMMENT_PREFIX=$(cat <<'EOF'
        ${{ fromJSON(inputs.dsb-build-envs).application-name }} ${{ fromJSON(inputs.dsb-build-envs).pr-deploy-comment-prefix }}
        EOF
        )
        COMMENT_TEXT=$(cat <<'EOF'
        ```
                 name: ${{ fromJSON(inputs.dsb-build-envs).application-name }}
              version: ${{ fromJSON(inputs.dsb-build-envs).application-version }}
          description: ${{ fromJSON(inputs.dsb-build-envs).application-description }}
        ```
        ArgoCD url: ${{ fromJSON(inputs.dsb-build-envs).pr-deploy-argo-applications-url }}/${{ fromJSON(inputs.dsb-build-envs).pr-deploy-k8s-application-name }}
        EOF
        )
        COMMENT_TEXT=$(echo "${COMMENT_PREFIX}" $'\n' "${COMMENT_TEXT}")

        # Add optional text passed from the triggering workflow
        ADDITIONAL_TEXT=$(cat <<'EOF'
        ${{ fromJSON(inputs.dsb-build-envs).pr-deploy-comment-additional-text }}
        EOF
        )
        if [ ! -z "${ADDITIONAL_TEXT}" ];then
          COMMENT_TEXT=$(echo "${COMMENT_TEXT}" $'\n' "${ADDITIONAL_TEXT}")
        fi

        log-info "Final PR comment prefix: ${COMMENT_PREFIX}"
        log-multiline "Final PR comment text" "${COMMENT_TEXT}"

        set-output 'prefix' "${COMMENT_PREFIX}"
        set-multiline-output 'comment' "${COMMENT_TEXT}"

    # add comment to PR
    - uses: dsb-norge/github-actions/ci-cd/comment-on-pr@v2
      with:
        pr-comment-text: ${{ steps.create-comment.outputs.comment }}
        delete-comments-starting-with: ${{ steps.create-comment.outputs.prefix }}
