name: 'Tear down ephemeral PR environment in AKS'
description: |
  Removes an application and namespace from ephemeral PR environment.
author: 'Peder Schmedling'
inputs:
  dsb-build-envs:
    description: |
      DSB build environment variables JSON.
      Required fields:
        See first step.
      Optional fields:
        None.
    required: true
runs:
  using: 'composite'
  steps:
    # we need to verify inputs since they are optional input to create-build-envs action
    # TODO revert to @v3
    - uses: dsb-norge/github-actions/ci-cd/require-build-envs@github-runners
      with:
        dsb-build-envs: ${{ inputs.dsb-build-envs }}
        require: |
          pr-deploy-aks-cluster-name
          pr-deploy-aks-resource-group
          pr-deploy-aks-creds
          pr-deploy-k8s-namespace
          pr-deploy-k8s-application-name

    - id: check-pull-request
      shell: bash
      run: |
        # Check if triggered by pull request event

        set -o allexport; source "${{ github.action_path }}/helpers.sh"; set +o allexport;

        [ ! '${{ github.event_name }}' == 'pull_request' ] \
          && log-error 'This action should only be called by pull request events.' \
          && EXIT_CODE=1 \
          || EXIT_CODE=0
        exit ${EXIT_CODE}

    - uses: azure/login@v2
      with:
        creds: ${{ inputs.dsb-build-envs && fromJSON(inputs.dsb-build-envs).pr-deploy-aks-creds }}

    # set target kubernetes cluster to
    - uses: azure/aks-set-context@v4
      with:
        cluster-name: ${{ fromJSON(inputs.dsb-build-envs).pr-deploy-aks-cluster-name }}
        resource-group: ${{ fromJSON(inputs.dsb-build-envs).pr-deploy-aks-resource-group }}
        admin: 'true'

    - id: helm-uninstall
      shell: bash
      env:
        K8S_NAMESPACE: ${{ fromJSON(inputs.dsb-build-envs).pr-deploy-k8s-namespace }}
        HELM_RELEASE_NAME: ${{ fromJSON(inputs.dsb-build-envs).pr-deploy-k8s-application-name }}
      run: |
        # Remove helm release

        set -o allexport; source "${{ github.action_path }}/helpers.sh"; set +o allexport;

        RESULT='true'
        if helm-release-exists "${K8S_NAMESPACE}" "${HELM_RELEASE_NAME}"; then
          log-info 'release found, uninstalling ...'
          if helm uninstall "${HELM_RELEASE_NAME}" --namespace "${K8S_NAMESPACE}"; then
            log-info "'helm uninstall' completed successfully."
          else
            EXIT_CODE=$?
            RESULT='false'
            log-error "'helm uninstall' did not complete successfully, exit code '${EXIT_CODE}'."
          fi
        else
          log-info 'no release found, nothing to do.'
        fi

        set-output 'result' "${RESULT}"

    - id: kubectl-delete-namespace
      shell: bash
      env:
        K8S_NAMESPACE: ${{ fromJSON(inputs.dsb-build-envs).pr-deploy-k8s-namespace }}
        HELM_RELEASE_NAME: ${{ fromJSON(inputs.dsb-build-envs).pr-deploy-k8s-application-name }}
      run: |
        # Remove namespace

        set -o allexport; source "${{ github.action_path }}/helpers.sh"; set +o allexport;

        RESULT='true'
        if k8s-namespace-exists "${K8S_NAMESPACE}"; then
          log-info 'namespace found, deleting ...'
          if kubectl delete namespace "${K8S_NAMESPACE}"; then
            log-info "'kubectl delete namespace' completed successfully."
          else
            EXIT_CODE=$?
            RESULT='false'
            log-error "'kubectl delete namespace' did not complete successfully, exit code '${EXIT_CODE}'."
          fi
        else
          log-info 'namespace does not exist, nothing to do.'
        fi

        set-output 'result' "${RESULT}"

    - id: eval-result
      shell: bash
      run: |
        # Log and evaluate result

        set -o allexport; source "${{ github.action_path }}/helpers.sh"; set +o allexport;

        log-debug "result: 'helm-uninstall': '${{ steps.helm-uninstall.outputs.result }}'"
        log-debug "result: 'kubectl delete namespace': '${{ steps.kubectl-delete-namespace.outputs.result }}'"

        if [ ! '${{ steps.helm-uninstall.outputs.result }}' == 'true' ] && [ ! '${{ steps.kubectl-delete-namespace.outputs.result }}' == 'true' ]; then
          log-error "failing action since both teardown operations failed!"
          exit 1
        elif [ ! '${{ steps.helm-uninstall.outputs.result }}' == 'true' ]; then
          log-error "failing action since helm uninstall operation failed!"
          exit 1
        elif [ ! '${{ steps.kubectl-delete-namespace.outputs.result }}' == 'true' ]; then
          log-error "failing action since delete namespace operation failed!"
          exit 1
        else
          log-info "teardown completed successfully."
        fi
