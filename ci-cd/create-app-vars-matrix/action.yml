name: 'Create build/deploy vars for one or more DSB apps'
description: |
  Given a yaml array of application specifications this action will:
    - Convert yaml input to JSON.
    - Attempt to detect application type for each app, where type is not explicitly defined in input.
      - 'spring-boot' will be set if pom.xml is found.
      - 'vue' will be set if package.json is found (and pom.xml is not found).
      - 'maven-library' has to be set explicitly as there is no auto-detection for this.
    - For all application types:
      - Attempt to read application description for each app, where description is not explicitly defined in input.
    - For "pom.xml" application types:
      - Attempt to read java version from pom.xml for each app, where java version is not explicitly defined in input.
    - Validate the app vars structure.
    - Generate some additional dynamic app vars and add them to all apps:
      - application-version           : DSB version string.
      - application-build-timestamp   : ISO datestamp for time of creation.
      - application-image-name        : Image name to use when pusing to a registry during build.
    - Return the JSON array, escaped for github and compatible with matrix build jobs, string named 'app-vars'.
author: 'Peder Schmedling'
inputs:
  apps:
    description: |
      YAML list (as sting) with specifications of applications to build and/or deploy.
      Required fields are:
        - application-name        - string
      For optional fields see possible inputs to the create-build-envs action.
    required: true
outputs:
  app-vars:
    description: Updated specification of applications to build and/or deploy, JSON array (as string).
    value: ${{ steps.make-matrix-compatible.outputs.app-vars }}
  applications-version:
    description: App version is common for all apps. Return version as separate output for convenience.
    value: ${{ steps.create-app-vars-matrix.outputs.applications-version }}
runs:
  using: 'composite'
  steps:
    - shell: bash
      id: convert
      run: |
        # Convert app vars yaml to JSON

        action_helpers_file="${{ github.action_path }}/helpers.sh"
        echo -e "create-app-vars-matrix: Loading helper functions from '${action_helpers_file}' ..."
        set -o allexport; source "${action_helpers_file}"; set +o allexport;

        # Log given yaml
        YAML_CONFIG=$(cat <<'EOF'
        ${{ inputs.apps }}
        EOF
        )
        start-group "yaml specification given"
        echo "${YAML_CONFIG}"
        end-group

        # Test if valid yaml
        if ! echo "${YAML_CONFIG}" | yq e 2>/dev/null 1>&2 ; then
          log-error "The given specification is not valid yaml!"
          exit 1
        fi

        # Convert yaml to JSON
        JSON_CONFIG=$(echo "${YAML_CONFIG}" | yq e -o=json -)
        log-json "specification as JSON" "${JSON_CONFIG}"

        echo 'app-vars<<"${{ github.run_id }}"' >> $GITHUB_OUTPUT
        echo "${JSON_CONFIG}" >> $GITHUB_OUTPUT
        echo '"${{ github.run_id }}"' >> $GITHUB_OUTPUT

    - shell: bash
      id: validate-input
      run: |
        # Validate given app vars structure

        action_helpers_file="${{ github.action_path }}/helpers.sh"
        echo -e "create-app-vars-matrix: Loading helper functions from '${action_helpers_file}' ..."
        set -o allexport; source "${action_helpers_file}"; set +o allexport;

        # Load and log app vars
        JSON_CONFIG=$(cat <<'EOF'
        ${{ steps.convert.outputs.app-vars }}
        EOF
        )
        log-json "JSON input received" "${JSON_CONFIG}"

        # Check that app vars is of type array
        if [ ! "$( echo "${JSON_CONFIG}" | jq -r '. | type' )" == 'array' ]; then
          log-error "The specification is not an array!"
          exit 1
        else
          log-info "[OK] The specification is an array."
        fi

        # Make sure at least one app vars specification is given
        NUM_APPS=$( echo "${JSON_CONFIG}" | jq -r '. | length' )
        if [ ${NUM_APPS} -le 0 ]; then
          log-error "The specification is an empty array!"
          exit 1
        else
          log-info "[OK] The specification is not an empty array."
        fi

    - shell: bash
      id: detect-type
      run: |
        # Set application type where not explicitly defined

        action_helpers_file="${{ github.action_path }}/helpers.sh"
        echo -e "create-app-vars-matrix: Loading helper functions from '${action_helpers_file}' ..."
        set -o allexport; source "${action_helpers_file}"; set +o allexport;

        # Load and log app vars
        IN_JSON=$(cat <<'EOF'
        ${{ steps.convert.outputs.app-vars }}
        EOF
        )
        log-json "JSON input received" "${IN_JSON}"

        # Build output JSON object
        OUT_JSON='[]'
        for APP_VARS in $(echo "${IN_JSON}" | jq -r '.[] | @base64'); do
          OUT_OBJ="$(_jq '.')"
          if ! has-field "application-type"; then
            APP_NAME="$(get-val 'application-name')"

            start-group "Detect 'application-type' for app '${APP_NAME}'"
            if ! has-field "application-source-path"; then
              log-info "'application-source-path' not defined, using default."
              set-val "application-source-path" "./" # modifies $OUT_OBJ
            fi

            SRC_PATH="$(get-val 'application-source-path')"
            if [ -d "${SRC_PATH}" ]; then
              log-info "'application-source-path' '${SRC_PATH}' is a directory."
              [ -f "${SRC_PATH}/pom.xml" ] && SRC_PATH="${SRC_PATH}/pom.xml" || :
              [ -f "${SRC_PATH}/package.json" ] && SRC_PATH="${SRC_PATH}/package.json" || :
            fi

            log-info "Using '${SRC_PATH}' as 'application-source-path'."
            if [ -f "${SRC_PATH}" ] && [ "$(basename ${SRC_PATH})" == 'pom.xml' ]; then
              log-info "Setting 'application-type' to 'spring-boot' since pom exists at '${SRC_PATH}'"
              set-val "application-type" "spring-boot" # modifies $OUT_OBJ
            elif [ -f "${SRC_PATH}" ] && [ "$(basename ${SRC_PATH})" == 'package.json' ]; then
              log-info "Setting 'application-type' to 'vue' since package.json exists at '${SRC_PATH}'"
              set-val "application-type" "vue" # modifies $OUT_OBJ
            elif [ -f "${SRC_PATH}" ]; then
              log-warn "Unable to detect 'application-type', file '${SRC_PATH}' is of unknown type!"
            else
              log-warn "Unable to detect 'application-type', '${SRC_PATH}' is not a file!"
            fi

            end-group
          fi

          # Add JSON object to output JSON
          OUT_JSON=$(echo "${OUT_JSON}" | jq '. += '["${OUT_OBJ}"']')
        done

        log-json "JSON output returned" "${OUT_JSON}"

        echo 'app-vars<<"${{ github.run_id }}"' >> $GITHUB_OUTPUT
        echo "${OUT_JSON}" >> $GITHUB_OUTPUT
        echo '"${{ github.run_id }}"' >> $GITHUB_OUTPUT

    - shell: bash
      id: get-app-meta
      run: |
        # Attempt to read application metadata from pom.xml/package.json for fields that are not explicitly defined in input

        action_helpers_file="${{ github.action_path }}/helpers.sh"
        echo -e "create-app-vars-matrix: Loading helper functions from '${action_helpers_file}' ..."
        set -o allexport; source "${action_helpers_file}"; set +o allexport;

        # Load and log app vars
        IN_JSON=$(cat <<'EOF'
        ${{ steps.detect-type.outputs.app-vars }}
        EOF
        )
        log-json "JSON input received" "${IN_JSON}"

        # Build output JSON object
        OUT_JSON='[]'
        for APP_VARS in $(echo "${IN_JSON}" | jq -r '.[] | @base64'); do
          OUT_OBJ="$(_jq '.')"

          APP_NAME="$(get-val 'application-name')"
          start-group "Get application metadata for app '${APP_NAME}'"

          if ! has-field "application-type"; then
            log-warn "'application-type' is not defined!"
          else
            if ! has-field "application-source-path"; then
              log-info "'application-source-path' not defined, using default."
              set-val "application-source-path" "./" # modifies $OUT_OBJ
            fi
            APP_TYPE="$(get-val 'application-type')"
            SRC_PATH="$(get-val 'application-source-path')"
            if [ -d "${SRC_PATH}" ]; then
              log-info "'application-source-path' '${SRC_PATH}' is a directory."
              [ "${APP_TYPE}" == 'spring-boot' ] && SRC_PATH="${SRC_PATH}/pom.xml" || :
              [ "${APP_TYPE}" == 'vue' ] && SRC_PATH="${SRC_PATH}/package.json" || :
            fi

            log-info "Using '${SRC_PATH}' as 'application-source-path'."
            if [ ! -f "${SRC_PATH}" ]; then
              log-warn "Unable to use 'application-source-path' with value '$(get-val 'application-source-path')'."
            else
              log-info "Reading file '${SRC_PATH}'"
              SRC_DATA=$(cat "${SRC_PATH}")
              if [ -z "${SRC_DATA}" ]; then
                log-warn "Unable to use given 'application-source-path', '${SRC_PATH}' was empty."
              else
                # declare as empty to avoid unbound variable
                APP_DESC=
                APP_JAVA_VERSION=

                if [ "${APP_TYPE}" == 'spring-boot' ] || [ "${APP_TYPE}" == 'maven-library' ]; then
                  APP_DESC=$(yq --input-format=xml --output-format=tsv --exit-status --expression='.project.description' "${SRC_PATH}") \
                  || log-warn "Unable to parse file '${SRC_PATH}' as XML or '<description>' field is missing."

                  APP_JAVA_VERSION=$(yq --input-format=xml --output-format=tsv --exit-status --expression='.project.properties."java.version"' "${SRC_PATH}") \
                  &&  log-info "Detected 'java-version=${APP_JAVA_VERSION}' from '<java.version>' in file '${SRC_PATH}'." \
                  || log-info "Could not detect 'java-version' from file '${SRC_PATH}', '<java.version>' field is missing."
                elif [ "${APP_TYPE}" == 'vue' ]; then
                  APP_DESC=$(echo "${SRC_DATA}" | jq -r '.["description"] | select( . != null )') \
                  || log-warn "Unable to parse file '${SRC_PATH}' as json."
                else
                  log-warn "Unknown 'application-type' '${APP_TYPE}', not sure how to use parse file '${SRC_PATH}'."
                fi

                # description
                if ! has-field "application-description"; then
                  [ -z "${APP_DESC}" ] \
                    && log-warn "No description was parsed from file '${SRC_PATH}'." \
                    || log-info "Description is: '${APP_DESC}'."
                  set-val "application-description" "${APP_DESC}" # modifies $OUT_OBJ
                fi

                # java version
                if ! has-field "java-version" && [ ! -z "${APP_JAVA_VERSION}" ]; then
                  log-info "Setting 'java-version' to: '${APP_JAVA_VERSION}'."
                  set-val "java-version" "${APP_JAVA_VERSION}" # modifies $OUT_OBJ
                fi
              fi
            fi
          fi

          end-group

          # Add JSON object to output JSON
          OUT_JSON=$(echo "${OUT_JSON}" | jq '. += '["${OUT_OBJ}"']')

          # cleanup between apps
          unset OUT_OBJ APP_NAME APP_TYPE SRC_PATH SRC_DATA APP_DESC APP_JAVA_VERSION
        done

        log-json "JSON output returned" "${OUT_JSON}"

        echo 'app-vars<<"${{ github.run_id }}"' >> $GITHUB_OUTPUT
        echo "${OUT_JSON}" >> $GITHUB_OUTPUT
        echo '"${{ github.run_id }}"' >> $GITHUB_OUTPUT

    - shell: bash
      id: validate-result
      run: |
        # Validate app vars structure, required fields and allowed values

        action_helpers_file="${{ github.action_path }}/helpers.sh"
        echo -e "create-app-vars-matrix: Loading helper functions from '${action_helpers_file}' ..."
        set -o allexport; source "${action_helpers_file}"; set +o allexport;

        # Load and log app vars
        JSON_CONFIG=$(cat <<'EOF'
        ${{ steps.get-app-meta.outputs.app-vars }}
        EOF
        )
        log-json "JSON input received" "${JSON_CONFIG}"

        # Required fields
        REQ_FIELDS=(
          'application-name'
          'application-description'
          'application-type'
        )

        # Allows values of application-type
        APP_TYPE_ALLOWED_VALUES=(
          'vue'
          'spring-boot'
          'maven-library'
        )

        # Check that app vars is of type array
        if [ ! "$( echo "${JSON_CONFIG}" | jq -r '. | type' )" == 'array' ]; then
          log-error "The specification is not an array!"
          exit 1
        else
          log-info "[OK] The specification is an array."
        fi

        # Make sure at least one app vars specification is given
        NUM_APPS=$( echo "${JSON_CONFIG}" | jq -r '. | length' )
        if [ ${NUM_APPS} -le 0 ]; then
          log-error "The specification is an empty array!"
          exit 1
        else
          log-info "[OK] The specification is not an empty array."
        fi

        DO_EXIT=0
        for APP_VARS in $(echo "${JSON_CONFIG}" | jq -r '.[] | @base64'); do
          for FIELD in ${REQ_FIELDS[*]}; do
            if [ "$(_jq 'has("'${FIELD}'")')" == 'false' ]; then
              fail-field "Missing property '${FIELD}' in application specification!"
            elif [ -z "$(_jq '."'${FIELD}'"')" ]; then
              fail-field "Property '${FIELD}' is empty in application specification!"
            elif [ "${FIELD}" == 'application-type' ]; then
              # application-type has allowed values
              if [[ ! " ${APP_TYPE_ALLOWED_VALUES[*]} " =~ " $(_jq '."application-type"') " ]]; then
                fail-field "Property '${FIELD}' has unknown value in application specification!"
              fi
            fi
          done
        done
        [ ${DO_EXIT} -eq 1 ] && exit 1 || log-info "[OK] All required fields were found in the specification."

    - shell: bash
      id: create-app-vars-matrix
      run: |
        # Add additional dynamic app vars

        action_helpers_file="${{ github.action_path }}/helpers.sh"
        echo -e "create-app-vars-matrix: Loading helper functions from '${action_helpers_file}' ..."
        set -o allexport; source "${action_helpers_file}"; set +o allexport;

        # Load and log app vars
        IN_JSON=$(cat <<'EOF'
        ${{ steps.get-app-meta.outputs.app-vars }}
        EOF
        )
        log-json "JSON input received" "${IN_JSON}"

        # Version and date
        APP_BUILDTIME="$(date -u +'%Y-%m-%dT%H:%M:%S.%3NZ')"
        APP_VERSION="$( date +%Y.%m.%d ).$(( $( date "+%s" ) - $( date -d 'today 00:00:00' "+%s" ) ))"
        if [ '${{ github.event_name }}' == 'pull_request' ]; then
          APP_VERSION="pr-${{ github.event.number }}-${APP_VERSION}"
        fi

        # Add static app vars to all elements in array
        add-to-all "application-version"                "${APP_VERSION}"    # modifies $IN_JSON
        add-to-all "application-build-timestamp"        "${APP_BUILDTIME}"  # modifies $IN_JSON

        # Build output JSON object
        OUT_JSON='[]'
        for APP_VARS in $(echo "${IN_JSON}" | jq -r '.[] | @base64'); do
          OUT_OBJ="$(_jq '.')"
          APP_NAME="$(get-val 'application-name')"
          IMAGE_NAME="${APP_NAME}"
          if [ '${{ github.event_name }}' == 'pull_request' ]
          then
            IMAGE_NAME=${IMAGE_NAME}-pr-${{ github.event.number }}
          fi
          set-val "application-image-name" "${IMAGE_NAME}" # modifies $OUT_OBJ

          # Add JSON object to output JSON
          OUT_JSON=$(echo "${OUT_JSON}" | jq '. += '["${OUT_OBJ}"']')
        done

        log-json "JSON output returned" "${OUT_JSON}"

        echo 'app-vars<<"${{ github.run_id }}"' >> $GITHUB_OUTPUT
        echo "${OUT_JSON}" >> $GITHUB_OUTPUT
        echo '"${{ github.run_id }}"' >> $GITHUB_OUTPUT

        echo "applications-version=${APP_VERSION}" >> $GITHUB_OUTPUT

    - shell: bash
      id: make-matrix-compatible
      run: |
        # Create app vars matrix

        action_helpers_file="${{ github.action_path }}/helpers.sh"
        echo -e "create-app-vars-matrix: Loading helper functions from '${action_helpers_file}' ..."
        set -o allexport; source "${action_helpers_file}"; set +o allexport;

        # Load and log app vars
        IN_JSON=$(cat <<'EOF'
        ${{ steps.create-app-vars-matrix.outputs.app-vars }}
        EOF
        )
        log-json "JSON input received" "${IN_JSON}"

        # Reshape JSON to conform to github matrix format:
        #{
        #  "application-name":["name"],
        #  "include":[
        #    {"application-name":"name","app-vars":{}}
        #  ]
        #}
        # Each element in the array will have one field 'app-vars' containing all app vars for a given app
        OUT_JSON=$(echo "${IN_JSON}" | jq '{ "application-name": map( .["application-name"]), "include": map({ "application-name": .["application-name"], "app-vars": . }) }')

        log-json "app vars JSON re-formatted for Github matrix job" "${OUT_JSON}"

        echo 'app-vars<<"${{ github.run_id }}"' >> $GITHUB_OUTPUT
        echo "${OUT_JSON}" >> $GITHUB_OUTPUT
        echo '"${{ github.run_id }}"' >> $GITHUB_OUTPUT
