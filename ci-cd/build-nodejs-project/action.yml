name: "Configure Node.js and build node project"
description: |
  Given the required input this action configures the specified version of node and builds a given project.
  Before npm is invoked the version Node.js specified in 'dsb-build-envs' is installed.
  As for working directory the field 'application-source-path' of 'dsb-build-envs' should point to the base directory of the project.
author: "Peder Schmedling"
inputs:
  dsb-build-envs:
    description: |
      DSB build environment variables JSON.
      Required fields:
        See first step.
      Optional fields:
        nodejs-build-project-custom-command-pre-npm-ci
        nodejs-build-project-custom-command-pre-npm-run-lint
        nodejs-build-project-custom-command-pre-npm-run-build
        nodejs-build-project-custom-command-final
    required: true
runs:
  using: "composite"
  steps:
    # verify we have required inputs in order to avoid blank labels/tags
    # TODO revert to @v2
    - uses: dsb-norge/github-actions/ci-cd/require-build-envs@snyk-test
      with:
        dsb-build-envs: ${{ inputs.dsb-build-envs }}
        require: |
          nodejs-version
          application-source-path

    # set up Node.js
    - uses: actions/setup-node@v3
      with:
        node-version: ${{ fromJSON(inputs.dsb-build-envs).nodejs-version }}

    # set up Snyk cli
    - uses: snyk/actions/setup@0.4.0
      env:
        SNYK_TOKEN: ${{ fromJSON(inputs.dsb-build-envs).snyk-token }}


    # npm install, build
    - shell: bash
      env:
        BUILD_ENVS: "${{ inputs.dsb-build-envs }}"
      run: |
        # npm install, build with support for additional custom commands

        # Helper functions
        # Check if field exists in BUILD_ENVS safely
        function has-field { if [[ "$(echo "${BUILD_ENVS}"| jq --arg name "$1" 'has($name)')" == 'true' ]]; then true; else false; fi; }
        # Get field value from BUILD_ENVS safely
        function get-val { echo "${BUILD_ENVS}" | jq -r --arg name "$1" '.[$name]'; }
        function log-info { echo "build-nodejs-project: $*"; }
        function log-error { echo "ERROR: build-nodejs-project: $*"; }
        function start-group { echo "::group::build-nodejs-project: $*"; }
        function end-group { echo "::endgroup::"; }

        log-info "Looking for project to build ..."
        WORK_DIR=${{ github.workspace }}/${{ fromJSON(inputs.dsb-build-envs).application-source-path }}
        [ -d "${WORK_DIR}" ] \
          && log-info "Found project at '${WORK_DIR}'" \
          || log-error "given 'application-source-path' does not exist: '${WORK_DIR}'" \
          || exit 1
        pushd "${WORK_DIR}" >/dev/null
        
        log-info "Setting up Snyk Token"
        SNYK_TOKEN=${{ fromJSON(inputs.dsb-build-envs).snyk-token }}

        if has-field 'nodejs-build-project-custom-command-pre-npm-ci'; then
          start-group "Custom command: pre npm ci"
          log-info "Command string: '$(get-val 'nodejs-build-project-custom-command-pre-npm-ci')'"
          eval "$(get-val 'nodejs-build-project-custom-command-pre-npm-ci')"
          end-group
        else
          log-info "Skipping custom pre npm ci command, not defined"
        fi

        start-group "npm ci --ignore-scripts"
        npm ci --ignore-scripts
        end-group

        if has-field 'nodejs-build-project-custom-command-pre-npm-run-lint'; then
          start-group "Custom command: pre npm run lint"
          log-info "Command string: '$(get-val 'nodejs-build-project-custom-command-pre-npm-run-lint')'"
          eval "$(get-val 'nodejs-build-project-custom-command-pre-npm-run-lint')"
          end-group
        else
          log-info "Skipping custom pre npm run lint command, not defined"
        fi

        start-group "npm run lint"
        npm run lint
        end-group

        if has-field 'nodejs-build-project-custom-command-pre-npm-run-build'; then
          start-group "Custom command: pre npm run build"
          log-info "Command string: '$(get-val 'nodejs-build-project-custom-command-pre-npm-run-build')'"
          eval "$(get-val 'nodejs-build-project-custom-command-pre-npm-run-build')"
          end-group
        else
          log-info "Skipping custom pre npm run build command, not defined"
        fi

        start-group "npm run build"
        npm run build
        end-group

        if has-field 'nodejs-build-project-custom-command-final'; then
          start-group "Custom command: final"
          log-info "Command string: '$(get-val 'nodejs-build-project-custom-command-final')'"
          eval "$(get-val 'nodejs-build-project-custom-command-final')"
          end-group
        else
          log-info "Skipping custom final command, not defined"
        fi
        
        start-group "snyk test"
        snyk test --file=.\package-lock-json
        end-group

        popd >/dev/null
