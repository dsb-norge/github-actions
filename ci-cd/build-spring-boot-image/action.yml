name: 'Build spring boot OCI image with labels and tags'
description: |
  Use spring boot maven plugin to build OCI image from maven project.
  This uses the action dsb-norge/github-actions/ci-cd/build-maven-project to invoke maven.
  Default maven invocations are:
    1. mvn -B --file <pom file> versions:set -DnewVersion=<version>
    2. mvn -B -DskipTests -Dspring-boot.build-image.imageName=local-spring-boot-image:<local image tag> --file <pom file> spring-boot:build-image
    - Where <pom file> is defined by 'application-source-path' in 'dsb-build-envs', can point either to an existing pom.xml or to a directory containing it.
    - Where <version> is controlled by 'application-version' defined in 'dsb-build-envs'.
    - Where <local image tag> is a random alpha generic string (created by this action) which identifies the built image locally.
  Maven invocations can be overriden:
    Invocation #1:
      - If 'spring-boot-build-image-version-command' is defined in 'dsb-build-envs', this will be used (replaces the whole maven invocation command).
        With the exception that the version number is hardcoded. Ie. all invocations will have the following argument prepended: '-DnewVersion=<version>'
      - If 'spring-boot-build-image-version-command' is NOT defined in 'dsb-build-envs':
        - And 'spring-boot-build-image-version-goals' is defined in 'dsb-build-envs', goals from 'spring-boot-build-image-version-goals' will be used.
        - And 'spring-boot-build-image-version-arguments' is defined in 'dsb-build-envs', arguments from
          'spring-boot-build-image-version-arguments' will be used.
        - When specific goals and/or arguments are defined the pom file reference will still be added to the final maven invocation. The resulting
          maven invocation command is: mvn <arguments> --file <pom file> <goals>
    Invocation #2 - Similar logic as #1 with <local image tag> instead of <version> and different fields of 'dsb-build-envs':
      The argument of the maven invocation defining the local image name and tag is hardcoded in this action. Ie. all invocations will have the
      following argument prepended: '-Dspring-boot.build-image.imageName=local-spring-boot-image:<local image tag>'
      - If 'spring-boot-build-image-command' is defined in 'dsb-build-envs', this will be used (replaces the whole maven invocation command).
      - If 'spring-boot-build-image-command' is NOT defined in 'dsb-build-envs':
        - And 'spring-boot-build-image-goals' is defined in 'dsb-build-envs', goals from 'spring-boot-build-image-version-goals' will be used.
        - And 'spring-boot-build-image-arguments' is defined in 'dsb-build-envs', arguments from
          'spring-boot-build-image-arguments' will be used.
        - When specific goals and/or arguments are defined the pom file reference will still be added to the final maven invocation. The resulting
          maven invocation command is: mvn <arguments> --file <pom file> <goals>
    If 'spring-boot-build-image-pull-images-pre-build-yml' is specified:
      Expected to be a YAML list of strings with docker images to pull before build process starts.
      This can be used for pulling images from various registries to make them available to maven.
author: 'Direktoratet for samfunnssikkerhet og beredskap'
inputs:
  dsb-build-envs:
    description: |
      DSB build environment variables JSON.
      Required fields:
        See first step.
      Optional fields:
        spring-boot-build-image-version-command
        spring-boot-build-image-version-goals
        spring-boot-build-image-version-arguments
        spring-boot-build-image-command
        spring-boot-build-image-goals
        spring-boot-build-image-arguments
        spring-boot-build-image-pull-images-pre-build-yml
    required: true
runs:
  using: 'composite'
  steps:
    # verify we have required inputs in order to avoid blank labels/tags
    # TODO revert to @v3
    - uses: dsb-norge/github-actions/ci-cd/require-build-envs@python-support
      with:
        dsb-build-envs: ${{ inputs.dsb-build-envs }}
        require: |
          application-image-id
          application-version
          application-name
          application-description
          application-vendor
          application-build-timestamp
          application-source
          application-source-revision
          application-source-path
          docker-image-registry
          acr-username
          acr-password

    # log into azure container registry (ACR)
    - uses: azure/docker-login@v2
      with:
        login-server: ${{ fromJSON(inputs.dsb-build-envs).docker-image-registry }}
        username: ${{ fromJSON(inputs.dsb-build-envs).acr-username }}
        password: ${{ fromJSON(inputs.dsb-build-envs).acr-password }}

    - name: 'Re-tag Previous Image'
      # Condition: No changes, push/dispatch event, AND (it's a push on default OR a previous tag exists)
      if: |
        fromJSON(inputs.dsb-build-envs)['has-changes'] == false
        && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        && (
             (github.event_name == 'push' && fromJSON(inputs.dsb-build-envs)['caller-repo-is-on-default-branch'] == true)
             || fromJSON(inputs.dsb-build-envs)['application-previous-version-tag'] != null
           )
      env:
        # Determine the source tag (primarily for logging now)
        SOURCE_IMAGE_TAG_FOR_LOGGING: ${{ (github.event_name == 'push' && fromJSON(inputs.dsb-build-envs)['caller-repo-is-on-default-branch'] == true) && 'latest' || fromJSON(inputs.dsb-build-envs).application-previous-version-tag }}
        # Construct Source image directly using the conditional logic for the tag
        SOURCE_IMAGE: ${{ fromJSON(inputs.dsb-build-envs).docker-image-registry }}/${{ fromJSON(inputs.dsb-build-envs).docker-image-repo }}/${{ fromJSON(inputs.dsb-build-envs).application-name }}:${{ (github.event_name == 'push' && fromJSON(inputs.dsb-build-envs)['caller-repo-is-on-default-branch'] == true) && 'latest' || fromJSON(inputs.dsb-build-envs).application-previous-version-tag }}
        # Target image using the NEW application version tag
        TARGET_IMAGE: ${{ fromJSON(inputs.dsb-build-envs).docker-image-registry }}/${{ fromJSON(inputs.dsb-build-envs).docker-image-repo }}/${{ fromJSON(inputs.dsb-build-envs).application-name }}:${{ fromJSON(inputs.dsb-build-envs).application-version }}
      shell: bash
      run: |
        echo "No changes detected. Re-tagging previous image."
        echo "Source Tag Determined (for logging): ${{ env.SOURCE_IMAGE_TAG_FOR_LOGGING }}" # Log which tag we decided to use
        echo "Source Image: $SOURCE_IMAGE"
        echo "Target Image: $TARGET_IMAGE"

        # Optional: Pull the source image to ensure it exists locally before tagging.
        echo "Pulling source image $SOURCE_IMAGE..."
        docker pull "$SOURCE_IMAGE" || (echo "::error::Failed to pull source image $SOURCE_IMAGE. It might not exist or the previous tag is incorrect." && exit 1)

        echo "Tagging $SOURCE_IMAGE as $TARGET_IMAGE..."
        docker tag "$SOURCE_IMAGE" "$TARGET_IMAGE" || (echo "::error::Failed to tag image" && exit 1)

        echo "Pushing new tag $TARGET_IMAGE..."
        docker push "$TARGET_IMAGE" || (echo "::error::Failed to push new tag $TARGET_IMAGE" && exit 1)

        echo "Successfully re-tagged and pushed $TARGET_IMAGE."

    - name: ðŸ¦• Deno install
      if: fromJSON(inputs.dsb-build-envs)['has-changes'] == true
      shell: bash
      run: deno install
      working-directory: ${{ github.action_path }}/../

    # pull images before building, handy if mvn build requires any additional images from our acr
    - id: pull-images-pre-build
      if: fromJSON(inputs.dsb-build-envs)['has-changes'] == true
      shell: bash
      env:
        INPUT_DSB_BUILD_ENVS: '${{ inputs.dsb-build-envs }}'
      run: deno run --allow-env --allow-read --allow-write --allow-run=docker ${{ github.action_path }}/action/1_pull-images-pre-build.ts

    # generate tags and labels
    - uses: docker/metadata-action@v5
      id: meta
      if: fromJSON(inputs.dsb-build-envs)['has-changes'] == true
      with:
        images: ${{ fromJSON(inputs.dsb-build-envs).application-image-id }}
        flavor: latest=true
        tags: ${{ fromJSON(inputs.dsb-build-envs).application-version }}
        labels: |
          org.opencontainers.image.title=${{ fromJSON(inputs.dsb-build-envs).application-name }}
          org.opencontainers.image.description=${{ fromJSON(inputs.dsb-build-envs).application-description }}
          org.opencontainers.image.vendor=${{ fromJSON(inputs.dsb-build-envs).application-vendor }}
          org.opencontainers.image.created=${{ fromJSON(inputs.dsb-build-envs).application-build-timestamp }}
          org.opencontainers.image.source=${{ fromJSON(inputs.dsb-build-envs).application-source }}
          org.opencontainers.image.revision=${{ fromJSON(inputs.dsb-build-envs).application-source-revision }}

    # generate label definition compatible with https://github.com/paketo-buildpacks/image-labels
    - id: create-labels
      if: fromJSON(inputs.dsb-build-envs)['has-changes'] == true
      shell: bash
      env:
        INPUT_LABELS_JSON: ${{ toJSON(steps.meta.outputs.json && fromJSON(steps.meta.outputs.json).labels || '{}') }}
      run: deno run --allow-env --allow-read --allow-write ${{ github.action_path }}/action/2_create-labels.ts

    # generate JSON with extra envs for maven
    - id: extra-envs
      if: fromJSON(inputs.dsb-build-envs)['has-changes'] == true
      shell: bash
      env:
        INPUT_LABELS_RAW: '${{ steps.create-labels.outputs.labels }}'
        INPUT_DSB_BUILD_ENVS: '${{ inputs.dsb-build-envs }}'
      run: deno run --allow-env --allow-read --allow-write ${{ github.action_path }}/action/3_extra-envs.ts

    # define maven commands
    - id: mvn-cmd
      if: fromJSON(inputs.dsb-build-envs)['has-changes'] == true
      shell: bash
      env:
        INPUT_DSB_BUILD_ENVS: '${{ inputs.dsb-build-envs }}'
        GITHUB_WORKSPACE: '${{ github.workspace }}'
      run: deno run --allow-env --allow-read --allow-write ${{ github.action_path }}/action/4_mvn-cmd.ts

    # filter dsb-build-envs
    - id: filter-build-envs
      if: fromJSON(inputs.dsb-build-envs)['has-changes'] == true
      shell: bash
      env:
        INPUT_DSB_BUILD_ENVS: '${{ inputs.dsb-build-envs }}'
      run: deno run --allow-env --allow-read --allow-write ${{ github.action_path }}/action/5_filter-build-envs.ts

    # build docker image
    # TODO revert to @v3
    - uses: dsb-norge/github-actions/ci-cd/build-maven-project@python-support
      if: fromJSON(inputs.dsb-build-envs)['has-changes'] == true
      with:
        mvn-version-cmd: ${{ steps.mvn-cmd.outputs.mvn-version-cmd }}
        mvn-cmd: ${{ steps.mvn-cmd.outputs.mvn-cmd }}
        set-extra-envs: ${{ steps.extra-envs.outputs.json }}
        dsb-build-envs: ${{ steps.filter-build-envs.outputs.dsb-build-envs }}

    - id: tag-and-push
      if: fromJSON(inputs.dsb-build-envs)['has-changes'] == true
      shell: bash
      env:
        INPUT_IMAGE_TAGS: '${{ steps.meta.outputs.tags }}'
        INPUT_LOCAL_IMAGE_ID: '${{ steps.mvn-cmd.outputs.local-image-id }}'
      run: deno run --allow-env --allow-read --allow-write --allow-run=docker ${{ github.action_path }}/action/6_tag-and-push.ts
