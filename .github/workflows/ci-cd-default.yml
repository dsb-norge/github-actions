name: "DSB Build, push and deploy"
#
# A requirement for this workflow to run is that the following 'permissions' are granted by the calling workflow:
#   permissions:
#     contents: read        # required for actions/checkout
#     pull-requests: write  # required for commenting on PRs
#     actions: write        # required to be able to delete GitHub caches in the calling repo
#
# In order to use this workflow a github app must be installed in the calling workflow's organization.
# The app must at minimum have 'contents: write' permissions in the application config repo(s) of the calling workflow.
#
# The following variables must available in the github 'vars' context:
#   - vars.ORG_AZURE_CONTAINER_REGISTRY_USER  <-- username of user with push+pull access to ACR, passed to the azure/docker-login action
#   - vars.ORG_CICD_APP_ID                    <-- app id from here: https://github.com/organizations/dsb-norge/settings/apps/dsb-norge-cicd-access
#   - vars.ORG_CICD_APP_INSTALLATION_ID       <-- app installation id found in url if you "configure" the app 'dsb-norge-cicd-access' from here: https://github.com/organizations/dsb-norge/settings/installations
#
# The following secrets must be available in the github 'secrets' context:
#   - secrets.ORG_AZURE_CONTAINER_REGISTRY_PASSWORD           <-- password of user with push+pull access to ACR, passed to the azure/docker-login action
#   - secrets.ORG_AZURE_CONTAINER_REGISTRY_SERVICE_PRINCIPAL  <-- service principal of Azure identity with delete access to ACR, passed to the azure/login actions and used for pruning in ACR
#   - secrets.ORG_AZURE_DEV_AKS_CONTRIBUTOR_SERVICE_PRINCIPAL <-- service principal of Azure identity with contributor access to the AKS instance for ephemeral environments
#   - secrets.ORG_CICD_APP_PRIVATE_KEY                        <-- generated from the app in github: https://github.com/organizations/dsb-norge/settings/apps/dsb-norge-cicd-access
#   - secrets.ORG_GITHUB_PACKAGES_ADMIN_PAT                   <-- GitHub PAT with with scopes [delete:packages, read:packages] in the calling repos organization
#   - secrets.ORG_JASYPT_LOCAL_ENCRYPTOR_PASSWORD             <-- jasypt password for local decryption of secrets during maven operations
#   - secrets.ORG_SONAR_TOKEN                                 <-- token for sonar integration
#
on:
  workflow_call:
    inputs:
      apps:
        type: string
        description: |
          Specification of applications to build and/or deploy.
          YAML list (as string) with specifications of applications to build and/or deploy.
          Required fields are:
            - application-name        - string
          For optional fields see possible inputs to the create-build-envs action.
        required: true
      # below are repo-specific settings, not app specific and thus does not belong in 'apps'
      # for explanation of maven artifact pruning configuration see inputs of 'ci-cd/prune-maven-artifacts-in-repo/action.yml'
      # sane defaults are defined but can be overridden pr. repo
      maven-artifacts-release-prune-keep-min-count:
        type: number
        required: false
        default: 20
      maven-artifacts-release-prune-keep-num-days:
        type: number
        required: false
        default: 90
      maven-artifacts-snapshot-prune-keep-min-count:
        type: number
        required: false
        default: 0
      maven-artifacts-snapshot-prune-keep-num-days:
        type: number
        required: false
        default: 30
      maven-artifacts-other-prune-keep-min-count:
        type: number
        required: false
        default: 0
      maven-artifacts-other-prune-keep-num-days:
        type: number
        required: false
        default: 0

jobs:
  check-docker-disk-space:
    name: Check Docker Disk Space & Prune if Needed
    runs-on: [self-hosted, dsb-builder, linux, x64]
    defaults:
      run:
        shell: bash
    steps:
      - name: Notify Internal Status (ci-cd-started)
        # TODO revert to @v3
        uses: dsb-norge/github-actions/ci-cd/notify-internal-status@playwright-e2e
        with:
          status: started
          step-name: ci-cd-started
          basic-auth-password: ${{ secrets.CLOUD_MONITOR_BASIC_AUTH_PASSWORD }}

      - name: "🩺 Check Docker disk usage and prune if necessary"
        # TODO revert to @v3
        uses: dsb-norge/github-actions/ci-cd/check-docker-disk-space@playwright-e2e
        with:
          threshold-gb: '7'

  create-matrix:
    name: Create build matrix
    needs: check-docker-disk-space
    runs-on: [self-hosted, dsb-builder, linux, x64]
    defaults:
      run:
        shell: bash
    outputs:
      app-vars-matrix: ${{ steps.create-matrix.outputs.app-vars }}
      applications-version: ${{ steps.create-matrix.outputs.applications-version }}
    steps:
      - name: "🧹 Clean: 🏢 workspace"
        id: clean
        uses: dsb-norge/directory-recreate@v1

      - name: "⬇ Checkout working branch"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Notify Internal Status (build-matrix-started)
        # TODO revert to @v3
        uses: dsb-norge/github-actions/ci-cd/notify-internal-status@playwright-e2e
        with:
          status: started
          step-name: build-matrix-started
          basic-auth-password: ${{ secrets.CLOUD_MONITOR_BASIC_AUTH_PASSWORD }}

      - name: "🎰 Generate: 📋 app vars build matrix"
        id: create-matrix
        # TODO revert to @v3
        uses: dsb-norge/github-actions/ci-cd/create-app-vars-matrix@playwright-e2e
        with:
          apps: ${{ inputs.apps }}

      - name: Notify Internal Status (build-matrix-finished)
        if: always()
        # TODO revert to @v3
        uses: dsb-norge/github-actions/ci-cd/notify-internal-status@playwright-e2e
        with:
          status: ${{ job.status }}
          step-name: build-matrix-finished
          basic-auth-password: ${{ secrets.CLOUD_MONITOR_BASIC_AUTH_PASSWORD }}
          appvars: ${{ steps.create-matrix.outputs.app-vars }}

  build-deploy:
    name: Build and deploy
    needs: create-matrix
    runs-on: [self-hosted, dsb-builder, linux, x64]
    strategy:
      matrix: ${{ fromJSON(needs.create-matrix.outputs.app-vars-matrix) }}
      fail-fast: false
    defaults:
      run:
        shell: bash
    steps:

      - name: "🩺 Check Docker disk usage and prune if necessary"
        # TODO revert to @v3
        uses: dsb-norge/github-actions/ci-cd/check-docker-disk-space@playwright-e2e
        with:
          threshold-gb: '7'

      - name: "🧹 Clean: 🏢 workspace"
        id: clean
        uses: dsb-norge/directory-recreate@v1

      - name: "⬇ Checkout working branch"
        id: checkout
        uses: actions/checkout@v4

      - name: "🔑 Obtain GitHub app installation access token for the CI/CD app"
        id: auth
        # TODO revert to @v3
        uses: dsb-norge/github-actions/get-github-app-installation-token@playwright-e2e
        with:
          github-app-id: ${{ vars.ORG_CICD_APP_ID }}
          github-app-installation-id: ${{ vars.ORG_CICD_APP_INSTALLATION_ID }}
          github-app-private-key: "${{ secrets.ORG_CICD_APP_PRIVATE_KEY }}"

      - name: "🎰 Generate: 🔢 DSB build variables"
        id: build-env
        # TODO revert to @v3
        uses: dsb-norge/github-actions/ci-cd/create-build-envs@playwright-e2e
        with:
          app-vars: ${{ toJSON(matrix.app-vars) }}
          github-json: ${{ toJSON(github) }}
          secrets-json: ${{ toJSON(secrets) }}
          vars-json: ${{ toJSON(vars) }}
          sonarqube-token: ${{ secrets.ORG_SONAR_TOKEN }}
          jasypt-password: ${{ secrets.ORG_JASYPT_LOCAL_ENCRYPTOR_PASSWORD }}
          acr-username: ${{ vars.ORG_AZURE_CONTAINER_REGISTRY_USER }}
          acr-password: ${{ secrets.ORG_AZURE_CONTAINER_REGISTRY_PASSWORD }}
          github-repo-token: ${{ secrets.GITHUB_TOKEN }}
          npmjs-token: ${{ secrets.ORG_NPM_TOKEN }}
          app-config-repo-token: ${{ steps.auth.outputs.github-token }}
          pr-deploy-aks-creds: ${{ secrets.ORG_AZURE_DEV_AKS_CONTRIBUTOR_SERVICE_PRINCIPAL }}
          acr-service-principal: ${{ secrets.ORG_AZURE_CONTAINER_REGISTRY_SERVICE_PRINCIPAL }}

      - name: Notify Internal Status (app-build-started)
        # TODO revert to @v3
        uses: dsb-norge/github-actions/ci-cd/notify-internal-status@playwright-e2e
        with:
          status: started
          step-name: app-build-started
          application-name: ${{ matrix.app-vars.application-name }}
          basic-auth-password: ${{ secrets.CLOUD_MONITOR_BASIC_AUTH_PASSWORD }}
          appvars: ${{ toJSON(matrix.app-vars) }}

      - name: "🔧 Prepare Deployment Variables"
        id: prep-deploy-vars
        run: |
          HAS_CHANGES='${{ matrix.app-vars['has-changes'] }}'
          NEW_VERSION='${{ matrix.app-vars['application-version'] }}'
          PREVIOUS_TAG='${{ matrix.app-vars['application-previous-version-tag'] }}'
          REGISTRY='${{ matrix.app-vars['docker-image-registry'] }}'
          REPO='${{ matrix.app-vars['docker-image-repo'] }}'
          IMAGE_NAME='${{ matrix.app-vars['application-image-name'] }}'

          IMAGE_ID_TO_DEPLOY=""
          VERSION_TO_DEPLOY=""

          if [[ "$HAS_CHANGES" == "true" ]]; then
            echo "App has changes. Using new version: $NEW_VERSION"
            IMAGE_ID_TO_DEPLOY="${REGISTRY}/${REPO}/${IMAGE_NAME}:${NEW_VERSION}"
            VERSION_TO_DEPLOY="$NEW_VERSION"
          elif [[ -n "$PREVIOUS_TAG" ]]; then
            echo "App has no changes. Using previous tag: $PREVIOUS_TAG"
            IMAGE_ID_TO_DEPLOY="${REGISTRY}/${REPO}/${IMAGE_NAME}:${PREVIOUS_TAG}"
            VERSION_TO_DEPLOY="$PREVIOUS_TAG"
          else
            echo "App has no changes and no previous tag found. Cannot determine deployment variables."
          fi

          echo "image_id=${IMAGE_ID_TO_DEPLOY}" >> $GITHUB_OUTPUT
          echo "version=${VERSION_TO_DEPLOY}" >> $GITHUB_OUTPUT

      - name: "🔄 Restore 📚 build dependencies cache"
        id: cache-restore
        if: |
          matrix.app-vars['has-changes'] == true
          && ! ( github.event_name == 'pull_request' && github.event.action == 'closed' )
          && fromJSON(steps.build-env.outputs.json).github-dependencies-cache-enabled
        # TODO revert to @v3
        uses: dsb-norge/github-actions/ci-cd/dependencies-cache-restore@playwright-e2e
        with:
          dsb-build-envs: ${{ steps.build-env.outputs.json }}

      - name: "🍃 Spring Boot app: ⚒ Build and analyze with Maven"
        id: maven-build
        if: |
          matrix.app-vars['has-changes'] == true
          && ! ( github.event_name == 'pull_request' && github.event.action == 'closed' )
          && matrix.app-vars.application-type == 'spring-boot'
        # TODO revert to @v3
        uses: dsb-norge/github-actions/ci-cd/build-maven-project@playwright-e2e
        with:
          dsb-build-envs: ${{ steps.build-env.outputs.json }}

      - name: "🍃 Spring Boot app: 🐳 Build, tag and push docker image"
        id: maven-docker-build
        if: |
          matrix.app-vars.application-type == 'spring-boot'
          && (
            ( github.event_name == 'pull_request' && github.event.action != 'closed' )
            || ((github.event_name == 'push' || github.event_name == 'workflow_dispatch' )
              && (
                fromJSON(steps.build-env.outputs.json).caller-repo-is-on-default-branch
                || ( ! fromJSON(steps.build-env.outputs.json).static-deploy-from-default-branch-only )
          )))
        # TODO revert to @v3
        uses: dsb-norge/github-actions/ci-cd/build-spring-boot-image@playwright-e2e
        with:
          dsb-build-envs: ${{ steps.build-env.outputs.json }}

      - name: "🌐 Vue.js app: ⚒ Build and test with npm"
        id: npm-build
        if: |
          matrix.app-vars['has-changes'] == true
          && ! ( github.event_name == 'pull_request' && github.event.action == 'closed' )
          && matrix.app-vars.application-type == 'vue'
        # TODO revert to @v3
        uses: dsb-norge/github-actions/ci-cd/build-nodejs-project@playwright-e2e
        with:
          dsb-build-envs: ${{ steps.build-env.outputs.json }}

      - name: "🌐 Vue.js app: 🐳 Build, tag and push docker image for vue"
        id: npm-docker-build
        if: |
          matrix.app-vars.application-type == 'vue'
          && (
            ( github.event_name == 'pull_request' && github.event.action != 'closed' )
            || ((github.event_name == 'push' || github.event_name == 'workflow_dispatch' )
              && (
                fromJSON(steps.build-env.outputs.json).caller-repo-is-on-default-branch
                || ( ! fromJSON(steps.build-env.outputs.json).static-deploy-from-default-branch-only )
          )))
        # TODO revert to @v3
        uses: dsb-norge/github-actions/ci-cd/build-docker-image@playwright-e2e
        with:
          dsb-build-envs: ${{ steps.build-env.outputs.json }}

      - name: "💾 Save 📚 build dependencies cache"
        id: cache-save
        if: |
          matrix.app-vars['has-changes'] == true
          && ! ( github.event_name == 'pull_request' && github.event.action == 'closed' )
          && fromJSON(steps.build-env.outputs.json).github-dependencies-cache-enabled
          && steps.cache-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ steps.cache-restore.outputs.cache-normalized-path }}
          key: ${{ fromJSON(steps.build-env.outputs.json).github-dependencies-cache-key }}

      - name: "🐙 Deploy: 🌍 to ephemeral PR environment"
        id: ephemeral-deploy
        if: |
          github.event_name == 'pull_request'
          && github.event.action != 'closed'
          && github.actor != 'renovate[bot]'
          && matrix.app-vars['pr-deploy-skip'] != true
        # TODO revert to @v3
        uses: dsb-norge/github-actions/ci-cd/deploy-to-ephemeral@playwright-e2e
        with:
          dsb-build-envs: ${{ steps.build-env.outputs.json }}

      - name: "🗑 Teardown: 🌍 of ephemeral PR environment"
        id: ephemeral-teardown
        if: github.event_name == 'pull_request' && github.event.action == 'closed'
        # TODO revert to @v3
        uses: dsb-norge/github-actions/ci-cd/teardown-pr-environment@playwright-e2e
        with:
          dsb-build-envs: ${{ steps.build-env.outputs.json }}

      - name: "🗑 Prune: 🐳 application docker images from ACR"
        id: prune-images
        if: |
          (github.event_name == 'push' || github.event_name == 'workflow_dispatch' )
          && (( fromJSON(steps.build-env.outputs.json).caller-repo-is-on-default-branch )
            || ( ! fromJSON(steps.build-env.outputs.json).static-deploy-from-default-branch-only )
          )
        # TODO revert to @v3
        uses: dsb-norge/github-actions/ci-cd/prune-images-from-acr@playwright-e2e
        with:
          dsb-build-envs: ${{ steps.build-env.outputs.json }}

      - name: "🗑 Delete: 🐳 PR docker images from ACR"
        id: delete-pr-images
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && always() && steps.build-env.outcome == 'success'
        # TODO revert to @v3
        uses: dsb-norge/github-actions/ci-cd/delete-pr-images-from-acr@playwright-e2e
        with:
          dsb-build-envs: ${{ steps.build-env.outputs.json }}

      - name: "🗑 Delete: 📚 PR build dependencies caches"
        id: cache-delete
        if: |
          github.event_name == 'pull_request' && github.event.action == 'closed'
          && always() && steps.build-env.outcome == 'success'
          && fromJSON(steps.build-env.outputs.json).github-dependencies-cache-enabled
          && fromJSON(steps.build-env.outputs.json).github-dependencies-cache-delete-on-pr-close
        # TODO revert to @v3
        uses: dsb-norge/github-actions/ci-cd/delete-pr-github-caches@playwright-e2e
        with:
          dsb-build-envs: ${{ steps.build-env.outputs.json }}
        continue-on-error: true

      - name: Notify Internal Status (app-build-finished)
        if: always()
        # TODO revert to @v3
        uses: dsb-norge/github-actions/ci-cd/notify-internal-status@playwright-e2e
        with:
          status: ${{ job.status }}
          step-name: app-build-finished
          application-name: ${{ matrix.app-vars.application-name }}
          basic-auth-password: ${{ secrets.CLOUD_MONITOR_BASIC_AUTH_PASSWORD }}
          appvars: ${{ toJSON(matrix.app-vars) }}

  deploy-to-static:
    name: Deploy app(s) to static environments
    if: |
      (github.event_name == 'push' || github.event_name == 'workflow_dispatch' )
    needs: [create-matrix, build-deploy]
    runs-on: [self-hosted, dsb-builder, linux, x64]
    defaults:
      run:
        shell: bash
    steps:
      - name: "🧹 Clean: 🏢 workspace"
        id: clean
        uses: dsb-norge/directory-recreate@v1

      - name: "⬇ Checkout working branch"
        id: checkout
        uses: actions/checkout@v4

      - name: "💾 Read build-envs from matrix job(s)"
        id: read-build-envs
        # TODO revert to @v3
        uses: dsb-norge/github-actions/ci-cd/collect-build-envs@playwright-e2e
        with:
          build-envs-artifact-name-prefix: build-envs-${{ needs.create-matrix.outputs.applications-version }}

      - name: "✔ Check if deploy is allowed from calling branch"
        id: deploy-static-check
        # This check is required to block deploys when workflow is manually triggered from a non-default branch
        # TODO revert to @v3
        uses: dsb-norge/github-actions/ci-cd/deploy-multiple-to-static-is-allowed@playwright-e2e
        with:
          dsb-build-envs-array: ${{ steps.read-build-envs.outputs.json-array }}

      - name: Notify Internal Status (app-deploy-started)
        # TODO revert to @v3
        uses: dsb-norge/github-actions/ci-cd/notify-internal-status@playwright-e2e
        with:
          status: started
          step-name: app-deploy-started
          basic-auth-password: ${{ secrets.CLOUD_MONITOR_BASIC_AUTH_PASSWORD }}

      - name: "🔑 Obtain GitHub app installation access token for the CI/CD app"
        id: auth
        if: steps.deploy-static-check.outputs.result == 'true'
        # TODO revert to @v3
        uses: dsb-norge/github-actions/get-github-app-installation-token@playwright-e2e
        with:
          github-app-id: ${{ vars.ORG_CICD_APP_ID }}
          github-app-installation-id: ${{ vars.ORG_CICD_APP_INSTALLATION_ID }}
          github-app-private-key: "${{ secrets.ORG_CICD_APP_PRIVATE_KEY }}"

      - name: "🐙 Deploy: 🌍 apps to static environment(s)"
        id: static-deploy
        if: steps.deploy-static-check.outputs.result == 'true'
        # TODO revert to @v3
        uses: dsb-norge/github-actions/ci-cd/deploy-multiple-to-static@playwright-e2e
        with:
          dsb-build-envs-array: ${{ steps.read-build-envs.outputs.json-array }}
          app-config-repo-token: ${{ steps.auth.outputs.github-token }}

      - name: "🏷️ Tag current git commit with application version"
        id: version-tag
        if: steps.deploy-static-check.outputs.result == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ needs.create-matrix.outputs.applications-version }}',
              sha: context.sha
            })
      
      - name: Notify Internal Status (app-deploy-finished)
        if: always()
        # TODO revert to @v3
        uses: dsb-norge/github-actions/ci-cd/notify-internal-status@playwright-e2e
        with:
          status: ${{ job.status }}
          step-name: app-deploy-finished
          basic-auth-password: ${{ secrets.CLOUD_MONITOR_BASIC_AUTH_PASSWORD }}

  prune-maven-artifacts:
    name: Prune maven artifacts
    if: >-
      ( success() || failure() )
      &&
      ( github.event_name != 'pull_request' || github.event.action == 'closed' )
    needs: [create-matrix, build-deploy]
    runs-on: [self-hosted, dsb-builder, linux, x64]
    defaults:
      run:
        shell: bash
    steps:
      - name: "🗑 Prune: 📦 maven artifacts"
        id: prune-artifacts
        # TODO revert to @v3
        uses: dsb-norge/github-actions/ci-cd/prune-maven-artifacts-in-repo@playwright-e2e
        with:
          github-packages-token: ${{ secrets.ORG_GITHUB_PACKAGES_ADMIN_PAT }}
          other-prune-keep-min-count: ${{ inputs.maven-artifacts-other-prune-keep-min-count }}
          other-prune-keep-num-days: ${{ inputs.maven-artifacts-other-prune-keep-num-days }}
          release-prune-keep-min-count: ${{ inputs.maven-artifacts-release-prune-keep-min-count }}
          release-prune-keep-num-days: ${{ inputs.maven-artifacts-release-prune-keep-num-days }}
          snapshot-prune-keep-min-count: ${{ inputs.maven-artifacts-snapshot-prune-keep-min-count }}
          snapshot-prune-keep-num-days: ${{ inputs.maven-artifacts-snapshot-prune-keep-num-days }}

  ci-cd-conclusion:
    if: always()
    name: ci-cd-conclusion
    needs:
      [create-matrix, build-deploy, deploy-to-static, prune-maven-artifacts]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - run: exit 1
        if: >-
          ${{
               contains(needs.*.result, 'failure')
            || contains(needs.*.result, 'cancelled')
          }}
