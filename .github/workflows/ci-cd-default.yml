name: "DSB Build, push and deploy"
#
# A requirement for this workflow to run is that the following 'permissions' are granted by the calling workflow:
#   permissions:
#     contents: read        # required for actions/checkout
#     pull-requests: write  # required for commenting on PRs
#     actions: write        # required to be able to delete GitHub caches in the calling repo
#
# In order to use this workflow a github app must be installed in the calling workflow's organization.
# The app must at minimum have 'contents: write' permissions in the application config repo(s) of the calling workflow.
#
# The following variables must available in the github 'vars' context:
#   - vars.ORG_AZURE_CONTAINER_REGISTRY_USER  <-- username of user with push+pull access to ACR, passed to the azure/docker-login action
#   - vars.ORG_CICD_APP_ID                    <-- app id from here: https://github.com/organizations/dsb-norge/settings/apps/dsb-norge-cicd-access
#   - vars.ORG_CICD_APP_INSTALLATION_ID       <-- app installation id found in url if you "configure" the app 'dsb-norge-cicd-access' from here: https://github.com/organizations/dsb-norge/settings/installations
#
# The following secrets must be available in the github 'secrets' context:
#   - secrets.ORG_AZURE_CONTAINER_REGISTRY_PASSWORD           <-- password of user with push+pull access to ACR, passed to the azure/docker-login action
#   - secrets.ORG_AZURE_CONTAINER_REGISTRY_SERVICE_PRINCIPAL  <-- service principal of Azure identity with delete access to ACR, passed to the azure/login actions and used for pruning in ACR
#   - secrets.ORG_AZURE_DEV_AKS_CONTRIBUTOR_SERVICE_PRINCIPAL <-- service principal of Azure identity with contributor access to the AKS instance for ephemeral environments
#   - secrets.ORG_CICD_APP_PRIVATE_KEY                        <-- generated from the app in github: https://github.com/organizations/dsb-norge/settings/apps/dsb-norge-cicd-access
#   - secrets.ORG_GITHUB_PACKAGES_ADMIN_PAT                   <-- GitHub PAT with with scopes [delete:packages, read:packages] in the calling repos organization
#   - secrets.ORG_JASYPT_LOCAL_ENCRYPTOR_PASSWORD             <-- jasypt password for local decryption of secrets during maven operations
#   - secrets.ORG_SONAR_TOKEN                                 <-- token for sonar integration
#
on:
  workflow_call:
    inputs:
      apps:
        type: string
        description: |
          Specification of applications to build and/or deploy.
          YAML list (as string) with specifications of applications to build and/or deploy.
          Required fields are:
            - application-name        - string
          For optional fields see possible inputs to the create-build-envs action.
        required: true
      # below are repo-specific settings, not app specific and thus does not belong in 'apps'
      # for explanation of maven artifact pruning configuration see inputs of 'ci-cd/prune-maven-artifacts-in-repo/action.yml'
      # sane defaults are defined but can be overridden pr. repo
      maven-artifacts-release-prune-keep-min-count:
        type: number
        required: false
        default: 20
      maven-artifacts-release-prune-keep-num-days:
        type: number
        required: false
        default: 90
      maven-artifacts-snapshot-prune-keep-min-count:
        type: number
        required: false
        default: 0
      maven-artifacts-snapshot-prune-keep-num-days:
        type: number
        required: false
        default: 30
      maven-artifacts-other-prune-keep-min-count:
        type: number
        required: false
        default: 0
      maven-artifacts-other-prune-keep-num-days:
        type: number
        required: false
        default: 0

jobs:
  create-matrix:
    name: Create build matrix
    runs-on: [self-hosted, dsb-builder, linux, x64]
    defaults:
      run:
        shell: bash
    outputs:
      app-vars-matrix: ${{ steps.create-matrix.outputs.app-vars }}
      applications-version: ${{ steps.create-matrix.outputs.applications-version }}
    steps:
      # The create-app-vars-matrix action requires source code to be available
      - name: "🧹 Clean: 🏢 workspace"
        id: clean
        # TODO revert to @v2
        uses: dsb-norge/github-actions/directory-recreate@test-reports-fix

      - name: "⬇ Checkout working branch"
        uses: actions/checkout@v4

      - name: "🎰 Generate: 📋 app vars build matrix"
        id: create-matrix
        # TODO revert to @v2
        uses: dsb-norge/github-actions/ci-cd/create-app-vars-matrix@test-reports-fix
        with:
          apps: ${{ inputs.apps }}

  build-deploy:
    name: Build and deploy
    needs: create-matrix
    runs-on: [self-hosted, dsb-builder, linux, x64]
    strategy:
      matrix: ${{ fromJSON(needs.create-matrix.outputs.app-vars-matrix) }}
      fail-fast: false # allow all paralell jobs to continue even if one fails
    defaults:
      run:
        shell: bash
    steps:
      - name: "🧹 Clean: 🏢 workspace"
        id: clean
        # TODO revert to @v2
        uses: dsb-norge/github-actions/directory-recreate@test-reports-fix

      - name: "⬇ Checkout working branch"
        id: checkout
        uses: actions/checkout@v4

      # need this to have access to the configuration repo of the application
      - name: "🔑 Obtain GitHub app installation access token for the CI/CD app"
        id: auth
        # TODO revert to @v2
        uses: dsb-norge/github-actions/get-github-app-installation-token@test-reports-fix
        with:
          github-app-id: ${{ vars.ORG_CICD_APP_ID }}
          github-app-installation-id: ${{ vars.ORG_CICD_APP_INSTALLATION_ID }}
          github-app-private-key: "${{ secrets.ORG_CICD_APP_PRIVATE_KEY }}"

      - name: "🎰 Generate: 🔢 DSB build variables"
        id: build-env
        # TODO revert to @v2
        uses: dsb-norge/github-actions/ci-cd/create-build-envs@test-reports-fix
        with:
          app-vars: ${{ toJSON(matrix.app-vars) }}
          github-json: ${{ toJSON(github) }}
          secrets-json: ${{ toJSON(secrets) }}
          vars-json: ${{ toJSON(vars) }}
          sonarqube-token: ${{ secrets.ORG_SONAR_TOKEN }}
          jasypt-password: ${{ secrets.ORG_JASYPT_LOCAL_ENCRYPTOR_PASSWORD }}
          acr-username: ${{ vars.ORG_AZURE_CONTAINER_REGISTRY_USER }}
          acr-password: ${{ secrets.ORG_AZURE_CONTAINER_REGISTRY_PASSWORD }}
          github-repo-token: ${{ secrets.GITHUB_TOKEN }}
          app-config-repo-token: ${{ steps.auth.outputs.github-token }}
          pr-deploy-aks-creds: ${{ secrets.ORG_AZURE_DEV_AKS_CONTRIBUTOR_SERVICE_PRINCIPAL }}
          acr-service-principal: ${{ secrets.ORG_AZURE_CONTAINER_REGISTRY_SERVICE_PRINCIPAL }}

      - name: "🔄 Restore 📚 build dependencies cache"
        id: cache-restore
        # Skip step when closing a PR, and only run when deps cache is enabled
        if: |
          ! ( github.event_name == 'pull_request' && github.event.action == 'closed' )
          && fromJSON(steps.build-env.outputs.json).github-dependencies-cache-enabled
        # TODO revert to @v2
        uses: dsb-norge/github-actions/ci-cd/dependencies-cache-restore@test-reports-fix
        with:
          dsb-build-envs: ${{ steps.build-env.outputs.json }}

      - name: "🍃 Spring Boot app: ⚒ Build and analyze with Maven"
        id: maven-build
        # Skip step when closing a PR, and only run for spring-boot apps
        if: |
          ! ( github.event_name == 'pull_request' && github.event.action == 'closed' )
          && matrix.app-vars.application-type == 'spring-boot'
        # TODO revert to @v2
        uses: dsb-norge/github-actions/ci-cd/build-maven-project@test-reports-fix
        with:
          dsb-build-envs: ${{ steps.build-env.outputs.json }}

      - name: "🍃 Spring Boot app: 🐳 Build, tag and push docker image"
        id: maven-docker-build
        # Run step when:
        #   - app is spring-boot
        #   - running from PRa nd not closing
        #   - push or manual on default branch or when specifically allowing deploy from non-default branch
        if: |
          matrix.app-vars.application-type == 'spring-boot'
          && (
            ( github.event_name == 'pull_request' && github.event.action != 'closed' )
            || ((github.event_name == 'push' || github.event_name == 'workflow_dispatch' )
              && (
                fromJSON(steps.build-env.outputs.json).caller-repo-is-on-default-branch
                || ( ! fromJSON(steps.build-env.outputs.json).static-deploy-from-default-branch-only )
          )))
        # TODO revert to @v2
        uses: dsb-norge/github-actions/ci-cd/build-spring-boot-image@test-reports-fix
        with:
          dsb-build-envs: ${{ steps.build-env.outputs.json }}

      - name: "🌐 Vue.js app: ⚒ Build and test with npm"
        id: npm-build
        # Skip step when closing a PR, and only run for vue apps
        if: |
          ! ( github.event_name == 'pull_request' && github.event.action == 'closed' )
          && matrix.app-vars.application-type == 'vue'
        # TODO revert to @v2
        uses: dsb-norge/github-actions/ci-cd/build-nodejs-project@test-reports-fix
        with:
          dsb-build-envs: ${{ steps.build-env.outputs.json }}

      - name: "🌐 Vue.js app: 🐳 Build, tag and push docker image for vue"
        id: npm-docker-build
        # Run step when:
        #   - app is vue
        #   - running from PR and not closing
        #   - push or manual on default branch or when specifically allowing deploy from non-default branch
        if: |
          matrix.app-vars.application-type == 'vue'
          && (
            ( github.event_name == 'pull_request' && github.event.action != 'closed' )
            || ((github.event_name == 'push' || github.event_name == 'workflow_dispatch' )
              && (
                fromJSON(steps.build-env.outputs.json).caller-repo-is-on-default-branch
                || ( ! fromJSON(steps.build-env.outputs.json).static-deploy-from-default-branch-only )
          )))
        # TODO revert to @v2
        uses: dsb-norge/github-actions/ci-cd/build-docker-image@test-reports-fix
        with:
          dsb-build-envs: ${{ steps.build-env.outputs.json }}

      - name: "💾 Save 📚 build dependencies cache"
        id: cache-save
        # Skip step when closing a PR, only run when deps cache is enabled, and skip if cache already exists (aka. cache-hit)
        if: |
          ! ( github.event_name == 'pull_request' && github.event.action == 'closed' )
          && fromJSON(steps.build-env.outputs.json).github-dependencies-cache-enabled
          && steps.cache-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ steps.cache-restore.outputs.cache-normalized-path }} # use the expanded and normalized path
          key: ${{ fromJSON(steps.build-env.outputs.json).github-dependencies-cache-key }}

      - name: "🐙 Deploy: 🌍 to ephemeral PR environment"
        id: ephemeral-deploy
        # Run step when:
        #   - on PR
        #     - but not when closing PR
        #     - and not when event was triggered by renovate-bot
        #   (allows deploy when a user pushes to PR branch created by renovate-bot, as github.event.action is then the user)
        if: |
          github.event_name == 'pull_request'
          && github.event.action != 'closed'
          && github.actor != 'renovate[bot]'
        # TODO revert to @v2
        uses: dsb-norge/github-actions/ci-cd/deploy-to-ephemeral@test-reports-fix
        with:
          dsb-build-envs: ${{ steps.build-env.outputs.json }}

      - name: "🗑 Teardown: 🌍 of ephemeral PR environment"
        id: ephemeral-teardown
        # Step only runs when closing a PR
        if: github.event_name == 'pull_request' && github.event.action == 'closed'
        # TODO revert to @v2
        uses: dsb-norge/github-actions/ci-cd/teardown-pr-environment@test-reports-fix
        with:
          dsb-build-envs: ${{ steps.build-env.outputs.json }}

      - name: "🗑 Prune: 🐳 application docker images from ACR"
        id: prune-images
        # Run step when:
        #   - push or manual on default branch or when specifically allowing deploy from non-default branch
        if: |
          (github.event_name == 'push' || github.event_name == 'workflow_dispatch' )
          && (( fromJSON(steps.build-env.outputs.json).caller-repo-is-on-default-branch )
            || ( ! fromJSON(steps.build-env.outputs.json).static-deploy-from-default-branch-only )
          )
        # TODO revert to @v2
        uses: dsb-norge/github-actions/ci-cd/prune-images-from-acr@test-reports-fix
        with:
          dsb-build-envs: ${{ steps.build-env.outputs.json }}

      - name: "🗑 Delete: 🐳 PR docker images from ACR"
        id: delete-pr-images
        # Step only runs when closing a PR
        # Step runs even if previous steps have failed, with the exception of 'build-env' which is required
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && always() && steps.build-env.outcome == 'success'
        # TODO revert to @v2
        uses: dsb-norge/github-actions/ci-cd/delete-pr-images-from-acr@test-reports-fix
        with:
          dsb-build-envs: ${{ steps.build-env.outputs.json }}

      - name: "🗑 Delete: 📚 PR build dependencies caches"
        id: cache-delete
        # Step only runs when closing a PR
        # Step runs even if previous steps have failed, with the exception of 'build-env' which is required
        # Step only runs when dependencies cache is enabled
        # Step only runs when deletion of PR dependencies caches is enabled
        if: |
          github.event_name == 'pull_request' && github.event.action == 'closed'
          && always() && steps.build-env.outcome == 'success'
          && fromJSON(steps.build-env.outputs.json).github-dependencies-cache-enabled
          && fromJSON(steps.build-env.outputs.json).github-dependencies-cache-delete-on-pr-close
        # TODO revert to @v2
        uses: dsb-norge/github-actions/ci-cd/delete-pr-github-caches@test-reports-fix
        with:
          dsb-build-envs: ${{ steps.build-env.outputs.json }}
        continue-on-error: true # do not fail job when this fails, GitHub's eviction policy will clean up eventually

  deploy-to-static:
    name: Deploy app(s) to static environments
    # This job is currently just for deploy to static environments, run when:
    #   - push or manually triggered
    if: |
      (github.event_name == 'push' || github.event_name == 'workflow_dispatch' )
    needs: [create-matrix, build-deploy]
    runs-on: [self-hosted, dsb-builder, linux, x64]
    defaults:
      run:
        shell: bash
    steps:
      - name: "🧹 Clean: 🏢 workspace"
        id: clean
        # TODO revert to @v2
        uses: dsb-norge/github-actions/directory-recreate@test-reports-fix

      - name: "⬇ Checkout working branch"
        id: checkout
        uses: actions/checkout@v4

      - name: "💾 Read build-envs from matrix job(s)"
        id: read-build-envs
        # TODO revert to @v2
        uses: dsb-norge/github-actions/ci-cd/collect-build-envs@test-reports-fix
        with:
          build-envs-artifact-name-prefix: build-envs-${{ needs.create-matrix.outputs.applications-version }}

      - name: "✔ Check if deploy is allowed from calling branch"
        id: deploy-static-check
        # This check is required to block deploys when workflow is manually triggered from a non-default branch
        # TODO revert to @v2
        uses: dsb-norge/github-actions/ci-cd/deploy-multiple-to-static-is-allowed@test-reports-fix
        with:
          dsb-build-envs-array: ${{ steps.read-build-envs.outputs.json-array }}

      # need this to have access to the configuration repo(s) of the application(s)
      - name: "🔑 Obtain GitHub app installation access token for the CI/CD app"
        id: auth
        # Step only runs when deploy was allowed by deploy-multiple-to-static-is-allowed
        if: steps.deploy-static-check.outputs.result == 'true'
        # TODO revert to @v2
        uses: dsb-norge/github-actions/get-github-app-installation-token@test-reports-fix
        with:
          github-app-id: ${{ vars.ORG_CICD_APP_ID }}
          github-app-installation-id: ${{ vars.ORG_CICD_APP_INSTALLATION_ID }}
          github-app-private-key: "${{ secrets.ORG_CICD_APP_PRIVATE_KEY }}"

      - name: "🐙 Deploy: 🌍 apps to static environment(s)"
        id: static-deploy
        # Step only runs when deploy was allowed by deploy-multiple-to-static-is-allowed
        if: steps.deploy-static-check.outputs.result == 'true'
        # TODO revert to @v2
        uses: dsb-norge/github-actions/ci-cd/deploy-multiple-to-static@test-reports-fix
        with:
          dsb-build-envs-array: ${{ steps.read-build-envs.outputs.json-array }}
          app-config-repo-token: ${{ steps.auth.outputs.github-token }}

      - name: "🏷️ Tag current git commit with application version"
        id: version-tag
        # Step only runs when deploy was allowed by deploy-multiple-to-static-is-allowed
        if: steps.deploy-static-check.outputs.result == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ needs.create-matrix.outputs.applications-version }}',
              sha: context.sha
            })

  prune-maven-artifacts:
    name: Prune maven artifacts
    # This job handles pruning of maven artifacts published in the calling repo
    # Run even in case of failure in previous jobs/steps, in an attempt to avoid scenarios where PR snapshots would not get deleted
    # Skip step for pull request except to clean up snapshots when closing a PR
    if: >-
      ( success() || failure() )
      &&
      ( github.event_name != 'pull_request' || github.event.action == 'closed' )
    needs: [create-matrix, build-deploy]
    runs-on: [self-hosted, dsb-builder, linux, x64]
    defaults:
      run:
        shell: bash
    steps:
      - name: "🗑 Prune: 📦 maven artifacts"
        id: prune-artifacts
        # TODO revert to @v2
        uses: dsb-norge/github-actions/ci-cd/prune-maven-artifacts-in-repo@test-reports-fix
        with:
          github-packages-token: ${{ secrets.ORG_GITHUB_PACKAGES_ADMIN_PAT }}
          other-prune-keep-min-count: ${{ inputs.maven-artifacts-other-prune-keep-min-count }}
          other-prune-keep-num-days: ${{ inputs.maven-artifacts-other-prune-keep-num-days }}
          release-prune-keep-min-count: ${{ inputs.maven-artifacts-release-prune-keep-min-count }}
          release-prune-keep-num-days: ${{ inputs.maven-artifacts-release-prune-keep-num-days }}
          snapshot-prune-keep-min-count: ${{ inputs.maven-artifacts-snapshot-prune-keep-min-count }}
          snapshot-prune-keep-num-days: ${{ inputs.maven-artifacts-snapshot-prune-keep-num-days }}

  # create a global result indicating if workflow steps succeeded or not,
  # handy for branch protection rules
  ci-cd-conclusion:
    if: always()
    name: ci-cd-conclusion
    needs:
      [create-matrix, build-deploy, deploy-to-static, prune-maven-artifacts]
    runs-on: ubuntu-latest # no need to schedule this on our own runners
    defaults:
      run:
        shell: bash
    steps:
      - run: exit 1
        # for explanation of '>-' below see https://stackoverflow.com/a/67532120/4907315
        # job 'result': possible values are 'success', 'failure', 'cancelled', or 'skipped'
        if: >-
          ${{
               contains(needs.*.result, 'failure')
            || contains(needs.*.result, 'cancelled')
          }}
